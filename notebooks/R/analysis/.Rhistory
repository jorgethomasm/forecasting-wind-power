#| label: init
#| message: false
#| echo: false
# ==================== Wind-Power-Production-Forecast ===================
# Jan 2025
# jorgethomasm@ieee.org
# For: Ogre.ai
# ========================== Load Dependencies ==========================
# Add this at the start of your document
library("here")
library("arrow")
library("tictoc")     # measure runtime
library("tidyverse")  # ETL and EDA tools
library("lubridate")
library("kableExtra")
library("plotly")
library("infotheo")
library("corrplot")
library("tictoc")     # measure runtime
library("hexbin")     # Vis. Power Curve
library("splines")
source(here("src", "R", "utils", "jthomfuncs.r"))
source(here("src", "R", "utils", "jthomfuncs_wind.r"))
theme_set(jthomggtheme)
#| label: Querying
#| message: false
#| echo: true
#| warning: false
silistea_all <-  read_parquet(here("data", "interim", "Silistea_15min_20220101_20240630_n87457_cols33_null19pct.parquet"))
delta_t <- 0.25 # hours = 15 minutes step.
silistea_all$kW <- silistea_all$kWh / delta_t
# Label "Train" and "Test" data subsets:
silistea_all$dataset <- "train"
silistea_all$dataset[which(is.na(silistea_all$kWh))] <- "test"
print("Available variables:")
names(silistea_all)
#| label: fig-raw_ts
#| message: false
#| echo: true
#| warning: false
#| fig-width: 12
#| fig-height: 8
#| fig-cap: "15-minutes sampled power output during 2022 and 2023."
silistea_all |>
select(timestamp, kW) |>
mutate(year = as.factor(year(timestamp))) |>
filter(year != 2024) |>
ggplot(aes(x = timestamp)) +
geom_line(aes(y = kW), colour ="seagreen", alpha =0.6) +
scale_x_datetime(date_labels = "%b-%Y") +
labs(y = "Output\nPower\n[kW]", x = "Time (UTC)" ) +
facet_wrap(~year, ncol=1, scales = "free_x")
#| label: fig-Y
#| message: false
#| warning: false
#| column: body
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Analysis of the target variable. All the assumptions of OLS and linear regression are broken, as usual."
#| fig-subcap:
#|   - "Histogram"
#|   - "Q-Q Plot"
#| layout-ncol: 2
silistea_all |>
filter(dataset == "train") |>
ggplot(aes(x = kW)) +
geom_histogram(bins = 50, colour = "seagreen", fill = "seagreen", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 30000, 5000), labels = scales::comma) +
labs(x = "Power [kW]")
silistea_all |>
filter(dataset == "train") |>
ggplot(aes(sample = kW)) +
stat_qq(colour = "seagreen", alpha = 0.5) +
stat_qq_line(colour = "seagreen") +
scale_y_continuous(breaks = seq(0, 30000, 5000), labels = scales::comma) +
labs(y = "Power\n[kW]",
x = "Theoretical Quantiles (Norm. Dist.)")
#| label: fig-e-yield
#| message: false
#| warning: false
#| column: body
#| fig-width: 8
#| fig-height: 6
#| fig-cap: "Silistea-1 production during 2022 and 2023."
#| fig-cap-location: margin
#| fig-subcap:
#|   - "Annual yield."
#|   - "Monthly yield."
#| layout-ncol: 2
# =============  Annual yield =============
annual_yield <- silistea_all |>
select(timestamp, kWh) |>
mutate(year = as.factor(year(timestamp))) |>
filter(year != 2024) |>
mutate(year = floor_date(timestamp, "year")) |>
filter(year != as.POSIXct("2024-01-01")) |>
group_by(year) |>
summarise(total_energy_kWh = sum(kWh, na.rm = TRUE))
ggplot(annual_yield, aes(x = year, y = total_energy_kWh/1000)) +
geom_bar(stat = "identity", fill = "seagreen", alpha = 0.6) +
geom_text(aes(label = round(total_energy_kWh/1000, 2)), vjust = -0.3, size = 3.5) +
scale_x_datetime(date_labels = "%Y") +
labs(x = "", y = "Energy\nProduction\n[MWh]")
# ============= Monthly yield ============
monthly_yield <- silistea_all |>
select(timestamp, kWh) |>
mutate(year = as.factor(year(timestamp))) |>
filter(year != 2024) |>
mutate(month = floor_date(timestamp, "month")) |>
group_by(month) |>
summarise(total_energy_kWh = sum(kWh, na.rm = TRUE))
ggplot(monthly_yield, aes(x = month, y = total_energy_kWh/1000)) +
geom_bar(stat = "identity", fill = "seagreen", alpha = 0.6) +
geom_text(aes(label = round(total_energy_kWh/1000, 0)), vjust = -0.3, size = 3.5) +
scale_x_datetime(date_labels = "%b-%Y") +
labs(x = "", y = "")
silistea_all$humid_air_density <- calc_humid_air_density(silistea_all$t_2m, silistea_all$relative_humidity_2m/100, silistea_all$sfc_pressure/100) # Pa -> mbar
# TODO Write a function for the following:
# =================== wind speeds ===================
wind_speeds <- silistea_all |>
select(wind_speed_10m, wind_speed_50m, wind_speed_100m, wind_speed_200m) |>
mutate(wind_speed_150m  = NA) |>
relocate(wind_speed_150m, .before = wind_speed_200m)
ggplot(data = data.frame(windspeeds = t(wind_speeds[1,]),
height = c(10, 50, 100, 150, 200)),
aes(x = windspeeds, y = height)) +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", formula =  y ~ splines::bs(x, 3), colour = "red", linewidth = 0.5, alpha = 0.5) +
labs(title = "wind_speed", y = "Height [m]", x = "Wind Speed [m/s]")
# Generate New Feat. wind_speed_150m
for (i in 1:nrow(wind_speeds)) {
wind_speeds$wind_speed_150m[i] <- spline(c(10, 50, 100, 150, 200), wind_speeds[i,], xout = 150)$y
}
# Add new Feat. to DF
silistea_all$wind_speed_150m <- wind_speeds$wind_speed_150m
# Average wind speeds
silistea_all <- silistea_all |>
mutate(wind_speed_avg = (wind_speed_50m + wind_speed_100m + wind_speed_150m)/3)
# =================== u component wind speeds ===================
wind_speeds_u <- silistea_all |>
select(wind_speed_u_10m, wind_speed_u_50m, wind_speed_u_100m, wind_speed_u_200m) |>
mutate(wind_speed_u_150m  = NA) |>
relocate(wind_speed_u_150m, .before = wind_speed_u_200m)
ggplot(data = data.frame(windspeeds_u = t(wind_speeds_u[1,]), height = c(10, 50, 100, 150, 200)),
aes(x = windspeeds_u, y = height)) +
ggtitle("wind_speed_u") +
geom_point(alpha = 0.8) +
geom_smooth(method = "lm", formula =  y ~ splines::bs(x, 3), colour = "red", linewidth = 0.5, alpha = 0.5) +
labs(y = "Height [m]", x = "Wind Speed [m/s]")
# Generate New Feat. wind_speed_u_150m
for (i in 1:nrow(wind_speeds_u)) {
wind_speeds_u$wind_speed_u_150m[i] <- spline(c(10, 50, 100, 150, 200), wind_speeds_u[i,], xout = 150)$y
}
# Add new Feat. to DF
silistea_all$wind_speed_u_150m <- wind_speeds_u$wind_speed_u_150m
# Average wind_speeds_u
silistea_all <- silistea_all |>
mutate(wind_speed_u_avg = (wind_speed_u_50m + wind_speed_u_100m + wind_speed_u_150m)/3)
# arrow::write_parquet(silistea_all, here("data", "interim", "Silistea_15min_20220101_20240630_n87457_cols40_All_Feats.parquet"))
#| label: Start Reduction
silistea_redux <- silistea_all |>
select(-c(wind_speed_10m, wind_speed_50m, wind_speed_100m, wind_speed_150m, wind_speed_200m, wind_speed_u_10m, wind_speed_u_50m, wind_speed_u_100m, wind_speed_u_150m,wind_speed_u_200m))
#| label: fig-num-corr
#| fig-width: 12
#| fig-height: 12
#| fig-cap: The Pearson's correlation of features shows high presence of multicollinearity (blue triangles).
#| warning: false
#| message: false
silistea_redux |>
filter(dataset == "train") |>
select(-c(timestamp, dataset, kWh)) |>
cor(method = "pearson") |>
corrplot(type = "lower", method = "circle", insig = 'blank', order = "hclust", diag = TRUE, tl.col="black", tl.cex = 0.8, addCoef.col = 'black', number.cex = 0.6)
#| label: fig-splinesinterp
#| warning: false
#| message: false
#| column: body
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Searching for wind speed at 150 m."
#| fig-cap-location: margin
#| fig-subcap:
#|   - "wind_speed sample per height."
#|   - "wind_speed_u sample per height."
#| layout-ncol: 2
# Remove rubbish Feats.
silistea_redux$precip_1h <- NULL
silistea_redux$cape <- NULL
silistea_redux$snow_depth <- NULL
# =================== v component wind speeds ===================
#' This changes direction in function of height. Better leave only
#' the 100m component
silistea_redux <- silistea_redux |>
select(-c(wind_speed_v_10m, wind_speed_v_50m, wind_speed_v_200m))
# =================== Other Feats. ===================
# Eliminate wind direction except 100 m (sensor is on the nacelle)
silistea_redux <- silistea_redux |>
select(-c(wind_dir_10m ,wind_dir_50m, wind_dir_200m))
# Eliminate wind_gust_100_1h (almost the same as wind_speed_100m)
# silistea_redux$wind_gusts_100m_1h <- NULL  # could differ all of a sudden....
# Eliminate sfc_pressure (1 to 1 collinearity)
silistea_redux$sfc_pressure <- NULL
silistea_redux$msl_pressure <- NULL
# After seeing the MI plot, drop:
silistea_redux$wind_gusts_100m_1h <- NULL
silistea_redux$wind_speed_u_avg <- NULL
silistea_redux$high_cloud_cover <- NULL
silistea_redux$medium_cloud_cover <- NULL
silistea_redux$low_cloud_cover <- NULL
silistea_redux$relative_humidity_2m <- NULL
#| label: fig-num-mi
#| fig-width: 10
#| fig-height: 10
#| fig-cap: "Mutual information criterion."
#| fig-cap-location: margin
# "calc_mi" is a function I wrote in my lib.
mi_y_X <- silistea_redux |>
filter(dataset == "train") |>
select(-c(timestamp, dataset, kWh)) |>
calc_mi_score(target = "kW")
ggplot(data = mi_y_X, aes(x = nats, y = fct_reorder(Variable, nats))) +
geom_col(alpha = 0.5) +
geom_text(aes(label = paste(round(Percent, 2), "%")), size = 6) +
labs(y = "Feats.") +
theme(legend.position = "none")
#| label: fig-skewed-feats
#| fig-cap: "Sample of skewed predictors."
silistea_redux |>
filter(dataset == "train") |>
select(c(t_2m, dew_point_2m, wind_dir_100m, humid_air_density, total_cloud_cover, wind_speed_avg)) |>
pivot_longer(t_2m:wind_speed_avg) |>
ggplot(aes(x = value)) +
geom_histogram(bins = 50, colour = "lightgrey", fill = "lightgrey") +
labs(x = "") +
facet_wrap(~name, scales = "free")
#| label: fig-scatter-plots
#| message: false
#| warning: false
#| column: body
#| fig-width: 6
#| fig-height: 6
#| fig-cap: 'Looking for the wind farm power curve.'
#| cap-location: margin
#| fig-subcap:
#|   - "Scatter plot."
#|   - "Hexagonal bins plot."
#| layout-ncol: 2
# ============== Scatter plot ==============
silistea_redux |>
filter(dataset == "train") |>
select(timestamp, wind_speed_avg, t_2m, dew_point_2m, kW) |>
mutate(month = as.factor(month(timestamp))) |>
ggplot(aes(x = wind_speed_avg, y = kW))  +
scale_x_continuous(breaks = seq(0, 30, 2)) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(0, 26000)) +
geom_point(aes(colour = month), alpha = 0.1) +
# geom_point(aes(colour = t_2m), alpha = 0.1) +
labs(x = "Wind Speed [m/s]", y = "Output\n[kW]" )
# =========== Hexagonal bins plot ============
silistea_redux |>
filter(dataset == "train") |>
ggplot(aes(x = wind_speed_avg, y = kW)) +
scale_x_continuous(breaks = seq(0, 30, 2), limits = c(-1, 26) ) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(-500, 26000)) +
geom_hex(bins = 15, colour = "white", alpha = 0.9) +
labs(x = "Wind Speed [m/s]", y = "Output\n[kW]" ) +
theme(axis.title.y = element_blank(), legend.position = "right")
#| label: Save Processed data
arrow::write_parquet(silistea_redux, here("data", "processed", "Silistea_15min_20220101_20240630_n87457_cols13_redux_Feats.parquet"))
