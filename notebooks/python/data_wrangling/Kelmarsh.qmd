---
title: "Windpark Kelmarsh (20XX) - XX MW"
author: "Jorge A. Thomas"
format: html
jupyter: python3
---
# Wind Park Info

**Wind Turbines (WT):** 

**Height of WT:**  m

**Rotor Diameter:**  m

**Power Output:**  MW

This notebook is for data wrangling related to the Kelmarsh dataset.

https://zenodo.org/records/8252025

```{python}
#| label: init
#| eval: true
import os
import duckdb
import polars as pl
from pathlib import Path

# Get project root directory (2 levels up from notebook location)
PROJECT_ROOT = Path(__file__).parent.parent.parent.parent

folder_path_raw = PROJECT_ROOT / "data" / "raw" / "Kelmarsh"
folder_path_interim = PROJECT_ROOT / "data" / "interim"
folder_path_processed = PROJECT_ROOT / "data" / "processed"

fnames = [fname for fname in os.listdir(folder_path_raw) if fname.endswith('.csv')]

fnames_status  = [fname for fname in fnames if fname.startswith("Status_") and len(fname) < 51]
fnames_turbine  = [fname for fname in fnames if fname.startswith("Turbine_Data")]
# fnames_turbine  = [str(folder_path_raw) + "\\" + fname for fname in fnames if fname.startswith("Turbine_Data")]
fnames_device = [fname for fname in fnames if fname.startswith("Device_Data")]
fname_signal_map = "Kelmarsh_WT_dataSignalMapping.csv"  # Lookup
fname_wt_attr = "Kelmarsh_WT_static.csv"                # Lookup
fname_status_pmu = "Status_Kelmarsh_PMU_2016-01-09_-_2023-01-01_234.csv"
fname_status_grid_meter = "Status_Kelmarsh_Grid_Meter_2016-01-01_-_2023-01-01_19978.csv"
```

## Read and Write Lookup tables

```{python}

wt_attributes_lut = pl.read_csv(folder_path_raw / fname_wt_attr)
wt_attributes_lut.write_parquet(f"{folder_path_interim}/{"Kelmarsh_LUT_turbines_attributes.parquet"}")

signal_map_lut = pl.read_csv(folder_path_raw / fname_signal_map)
signal_map_lut.write_parquet(f"{folder_path_interim}/{"Kelmarsh_LUT_signal_map.parquet"}")

```

## Read Events and Grid Status

Information for reliability? 

```{python}

msgs_status = pl.read_csv(folder_path_raw / fname_status_pmu, comment_prefix="#")

msgs_status = msgs_status.with_columns(
    pl.col("Timestamp start").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC"),
    pl.col("Timestamp end").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC")    
    ).drop("Duration")

msgs_status = msgs_status.with_columns(
    (pl.col("Timestamp end") - pl.col("Timestamp start")).alias("Duration")
    )

msgs_status.write_parquet(f"{folder_path_interim}{"/Kelmarsh_status_pmu.parquet"}")


grid_status = pl.read_csv(folder_path_raw / fname_status_grid_meter, comment_prefix="#").with_columns(
    pl.col("Timestamp start").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC"),
    pl.col("Timestamp end").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC")    
    ).drop("Duration")

grid_status = grid_status.with_columns(
    (pl.col("Timestamp end") - pl.col("Timestamp start")).alias("Duration")
    )

grid_status.write_parquet(f"{folder_path_interim}{"/Kelmarsh_status_grid_meter.parquet"}")

```

## Status per Wind Turbine

```{python}

turbine_status_list_2017_2021 = [
    pl.read_csv(f"{folder_path_raw}/{fname}", 
    try_parse_dates=False, 
    comment_prefix="#",      
    # null_values="NaN", 
    # use_pyarrow=True,  
    ignore_errors=True).with_columns(
        pl.lit(fname).alias("wt"),
        pl.col("Timestamp start").str.strptime(pl.Datetime, format="%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC"),        
        pl.col("Timestamp end").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC")        
        ).drop("Duration") 
        for fname in fnames_status if fname.find("2022") == -1]

turbine_status_2017_2021 = pl.concat(turbine_status_list_2017_2021)

turbine_status_list_2022_2023 = [
    pl.read_csv(f"{folder_path_raw}/{fname}", 
    try_parse_dates=False, 
    comment_prefix="#",      
    # null_values="NaN", 
    # use_pyarrow=True,  
    ignore_errors=True).with_columns(
        pl.lit(fname).alias("wt"),
        pl.col("Timestamp start").str.strptime(pl.Datetime, format="%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC"),        
        pl.col("Timestamp end").str.strptime(pl.Datetime, "%Y-%m-%d %H:%M:%S", strict=False).dt.replace_time_zone("UTC")        
        ).drop("Duration") 
        for fname in fnames_status if fname.find("2022") != -1 or fname.find("2023") != -1]

turbine_status_2022_2023 = pl.concat(turbine_status_list_2022_2023)

turbine_status = pl.concat([turbine_status_2017_2021, turbine_status_2022_2023], how="diagonal")


```

## Concatenate statuses

```{python}

turbine_status = turbine_status.with_columns(
    (pl.col("Timestamp end") - pl.col("Timestamp start")).alias("Duration")
)

# Id turbines 
turbine_status = turbine_status.with_columns([
    pl.when(pl.col("wt").str.contains("_1_"))
    .then(pl.lit("T01"))
    .when(pl.col("wt").str.contains("_2_"))
    .then(pl.lit("T02"))
    .when(pl.col("wt").str.contains("_3_"))
    .then(pl.lit("T03"))
    .when(pl.col("wt").str.contains("_4_"))
    .then(pl.lit("T04"))
    .when(pl.col("wt").str.contains("_5_"))
    .then(pl.lit("T05"))
    .when(pl.col("wt").str.contains("_6_"))
    .then(pl.lit("T06"))
    .otherwise(pl.col("wt"))
    .alias("wt")
    ])


# Get metadata for filename
first_ts = turbine_status["Timestamp start"].min().strftime("%Y%m%d")
last_ts = turbine_status["Timestamp end"].max().strftime("%Y%m%d")
n_rows = len(turbine_status)

# Additional metadata options
n_cols = len(turbine_status.columns)

filename = f"Kelmarsh_Turbines_Status_{first_ts}_{last_ts}_n{n_rows}_cols{n_cols}.parquet"

turbine_status.write_parquet(f"{folder_path_interim}/{filename}")
```


## Wind Turbines Data

After errors and exploration, data frames from 2022 and 2023 have more columnas (about 4) than previous one.
This means, read data and concatenate separatelly.  

### Read 2017 - 2021 Turbine data

```{python}
#| label: wtdata schema2017-2021
#| echo: false

schema_2017_2021 = {'# Date and time': pl.Datetime, 'Wind speed (m/s)': pl.Float64, 'Wind speed, Standard deviation (m/s)': pl.Float64, 'Wind speed, Minimum (m/s)': pl.Float64, 'Wind speed, Maximum (m/s)': pl.Float64, 'Long Term Wind (m/s)': pl.Float64, 'Wind speed Sensor 1 (m/s)': pl.Float64, 'Wind speed Sensor 1, Standard deviation (m/s)': pl.Float64, 'Wind speed Sensor 1, Minimum (m/s)': pl.Float64, 'Wind speed Sensor 1, Maximum (m/s)': pl.Float64, 'Wind speed Sensor 2 (m/s)': pl.Float64, 'Wind speed Sensor 2, Standard deviation (m/s)': pl.Float64, 'Wind speed Sensor 2, Minimum (m/s)': pl.Float64, 'Wind speed Sensor 2, Maximum (m/s)': pl.Float64, 'Density adjusted wind speed (m/s)': pl.Float64, 'Wind direction (°)': pl.Float64, 'Nacelle position (°)': pl.Float64, 'Wind direction, Standard deviation (°)': pl.Float64, 'Wind direction, Minimum (°)': pl.Float64, 'Wind direction, Maximum (°)': pl.Float64, 'Nacelle position, Standard deviation (°)': pl.Float64, 'Nacelle position, Minimum (°)': pl.Float64, 'Nacelle position, Maximum (°)': pl.Float64, 'Vane position 1+2 (°)': pl.Float64, 'Vane position 1+2, Max (°)': pl.Float64, 'Vane position 1+2, Min (°)': pl.Float64, 'Vane position 1+2, StdDev (°)': pl.Float64, 'Energy Export (kWh)': pl.Float64, 'Energy Export counter (kWh)': pl.Float64, 'Energy Import (kWh)': pl.Float64, 'Energy Import counter (kWh)': pl.Float64, 'Lost Production (Contractual) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.2) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.3) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.4) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.3.2) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.2.2) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.2.3) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.3.2) (kWh)': pl.Float64, 'Energy Budget - Default (kWh)': pl.Float64, 'Energy Theoretical (kWh)': pl.Float64, 'Lost Production to Downtime (kWh)': pl.Float64, 'Lost Production to Performance (kWh)': pl.Float64, 'Lost Production Total (kWh)': pl.Float64, 'Lost Production to Curtailment (Total) (kWh)': pl.Float64, 'Lost Production to Curtailment (Grid) (kWh)': pl.Float64, 'Lost Production to Curtailment (Noise) (kWh)': pl.Float64, 'Lost Production to Curtailment (Shadow) (kWh)': pl.Float64, 'Lost Production to Curtailment (Bats) (kWh)': pl.Float64, 'Lost Production to Curtailment (Birds) (kWh)': pl.Float64, 'Lost Production to Curtailment (Ice) (kWh)': pl.Float64, 'Lost Production to Curtailment (Sector Management) (kWh)': pl.Float64, 'Lost Production to Curtailment (Technical) (kWh)': pl.Float64, 'Lost Production to Curtailment (Marketing) (kWh)': pl.Float64, 'Lost Production to Curtailment (Boat Action) (kWh)': pl.Float64, 'Compensated Lost Production (kWh)': pl.Float64, 'Virtual Production (kWh)': pl.Float64, 'Lost Production to Curtailment (Grid Constraint) (kWh)': pl.Float64, 'Lost Production to Downtime and Curtailment Total (kWh)': pl.Float64, 'Lost Production (Contractual Global) (kWh)': pl.Float64, 'Lost Production (Contractual Custom) (kWh)': pl.Float64, 'Power (kW)': pl.Float64, 'Potential power default PC (kW)': pl.Float64, 'Power, Standard deviation (kW)': pl.Float64, 'Power, Minimum (kW)': pl.Float64, 'Power, Maximum (kW)': pl.Float64, 'Potential power learned PC (kW)': pl.Float64, 'Potential power reference turbines (kW)': pl.Float64, 'Cascading potential power (kW)': pl.Float64, 'Cascading potential power for performance (kW)': pl.Float64, 'Potential power met mast anemometer (kW)': pl.Float64, 'Potential power primary reference turbines (kW)': pl.Float64, 'Potential power secondary reference turbines (kW)': pl.Float64, 'Turbine Power setpoint (kW)': pl.Float64, 'Potential power estimated (kW)': pl.Float64, 'Potential power MPC (kW)': pl.Float64, 'Potential power met mast anemometer MPC (kW)': pl.Float64, 'Turbine Power setpoint, Max (kW)': pl.Float64, 'Turbine Power setpoint, Min (kW)': pl.Float64, 'Turbine Power setpoint, StdDev (kW)': pl.Float64, 'Available Capacity for Production (kW)': pl.Float64, 'Available Capacity for Production (Planned) (kW)': pl.Float64, 'Power factor (cosphi)': pl.Float64, 'Power factor (cosphi), Max': pl.Float64, 'Power factor (cosphi), Min': pl.Float64, 'Power factor (cosphi), Standard deviation': pl.Float64, 'Reactive power (kvar)': pl.Float64, 'Reactive power, Max (kvar)': pl.Float64, 'Reactive power, Min (kvar)': pl.Float64, 'Reactive power, Standard deviation (kvar)': pl.Float64, 'Front bearing temperature (°C)': pl.Float64, 'Rear bearing temperature (°C)': pl.Float64, 'Stator temperature 1 (°C)': pl.Float64, 'Nacelle ambient temperature (°C)': pl.Float64, 'Nacelle temperature (°C)': pl.Float64, 'Transformer temperature (°C)': pl.Float64, 'Gear oil inlet temperature (°C)': pl.Float64, 'Generator bearing rear temperature (°C)': pl.Float64, 'Generator bearing front temperature (°C)': pl.Float64, 'Gear oil temperature (°C)': pl.Float64, 'Temp. top box (°C)': pl.Float64, 'Hub temperature (°C)': pl.Float64, 'Ambient temperature (converter) (°C)': pl.Float64, 'Rotor bearing temp (°C)': pl.Float64, 'Transformer cell temperature (°C)': pl.Float64, 'Front bearing temperature, Max (°C)': pl.Float64, 'Front bearing temperature, Min (°C)': pl.Float64, 'Front bearing temperature, Standard deviation (°C)': pl.Float64, 'Rear bearing temperature, Max (°C)': pl.Float64, 'Rear bearing temperature, Min (°C)': pl.Float64, 'Rear bearing temperature, Standard deviation (°C)': pl.Float64, 'Temperature motor axis 1 (°C)': pl.Float64, 'Temperature motor axis 2 (°C)': pl.Float64, 'Temperature motor axis 3 (°C)': pl.Float64, 'CPU temperature (°C)': pl.Float64, 'Nacelle temperature, Max (°C)': pl.Float64, 'Nacelle temperature, Min (°C)': pl.Float64, 'Generator bearing front temperature, Max (°C)': pl.Float64, 'Generator bearing front temperature, Min (°C)': pl.Float64, 'Generator bearing rear temperature, Max (°C)': pl.Float64, 'Generator bearing rear temperature, Min (°C)': pl.Float64, 'Generator bearing front temperature, Std (°C)': pl.Float64, 'Generator bearing rear temperature, Std (°C)': pl.Float64, 'Nacelle temperature, Standard deviation (°C)': pl.Float64, 'Gear oil temperature, Max (°C)': pl.Float64, 'Gear oil temperature, Min (°C)': pl.Float64, 'Gear oil temperature, Standard deviation (°C)': pl.Float64, 'Hub temperature, min (°C)': pl.Float64, 'Hub temperature, max (°C)': pl.Float64, 'Hub temperature, standard deviation (°C)': pl.Float64, 'Ambient temperature (converter), Max (°C)': pl.Float64, 'Ambient temperature (converter), Min (°C)': pl.Float64, 'Ambient temperature (converter), StdDev (°C)': pl.Float64, 'Gear oil inlet temperature, Max (°C)': pl.Float64, 'Gear oil inlet temperature, Min (°C)': pl.Float64, 'Gear oil inlet temperature, StdDev (°C)': pl.Float64, 'Nacelle ambient temperature, Max (°C)': pl.Float64, 'Nacelle ambient temperature, Min (°C)': pl.Float64, 'Nacelle ambient temperature, StdDev (°C)': pl.Float64, 'Rotor bearing temp, Max (°C)': pl.Float64, 'Rotor bearing temp, Min (°C)': pl.Float64, 'Rotor bearing temp, StdDev (°C)': pl.Float64, 'CPU temperature, Max (°C)': pl.Float64, 'CPU temperature, Min (°C)': pl.Float64, 'CPU temperature, StdDev (°C)': pl.Float64, 'Transformer cell temperature, Max (°C)': pl.Float64, 'Transformer cell temperature, Min (°C)': pl.Float64, 'Transformer cell temperature, StdDev (°C)': pl.Float64, 'Transformer temperature, Max (°C)': pl.Float64, 'Transformer temperature, Min (°C)': pl.Float64, 'Transformer temperature, StdDev (°C)': pl.Float64, 'Stator temperature 1, Max (°C)': pl.Float64, 'Stator temperature 1, Min (°C)': pl.Float64, 'Stator temperature 1, StdDev (°C)': pl.Float64, 'Temp. top box, Max (°C)': pl.Float64, 'Temp. top box, Min (°C)': pl.Float64, 'Temp. top box, StdDev (°C)': pl.Float64, 'Temperature motor axis 1, Max (°C)': pl.Float64, 'Temperature motor axis 1, Min (°C)': pl.Float64, 'Temperature motor axis 1, StdDev (°C)': pl.Float64, 'Temperature motor axis 2, Max (°C)': pl.Float64, 'Temperature motor axis 2, Min (°C)': pl.Float64, 'Temperature motor axis 2, StdDev (°C)': pl.Float64, 'Temperature motor axis 3, Max (°C)': pl.Float64, 'Temperature motor axis 3, Min (°C)': pl.Float64, 'Temperature motor axis 3, StdDev (°C)': pl.Float64, 'Voltage L1 / U (V)': pl.Float64, 'Voltage L2 / V (V)': pl.Float64, 'Voltage L3 / W (V)': pl.Float64, 'Grid voltage (V)': pl.Float64, 'Grid voltage, Max (V)': pl.Float64, 'Grid voltage, Min (V)': pl.Float64, 'Grid voltage, Standard deviation (V)': pl.Float64, 'Voltage L1 / U, Min (V)': pl.Float64, 'Voltage L1 / U, Max (V)': pl.Float64, 'Voltage L1 / U, Standard deviation (V)': pl.Float64, 'Voltage L2 / V, Min (V)': pl.Float64, 'Voltage L2 / V, Max (V)': pl.Float64, 'Voltage L2 / V, Standard deviation (V)': pl.Float64, 'Voltage L3 / W, Min (V)': pl.Float64, 'Voltage L3 / W, Max (V)': pl.Float64, 'Voltage L3 / W, Standard deviation (V)': pl.Float64, 'Current L1 / U (A)': pl.Float64, 'Current L2 / V (A)': pl.Float64, 'Current L3 / W (A)': pl.Float64, 'Grid current (A)': pl.Float64, 'Motor current axis 1 (A)': pl.Float64, 'Motor current axis 2 (A)': pl.Float64, 'Motor current axis 3 (A)': pl.Float64, 'Current L1 / U, min (A)': pl.Float64, 'Current L1 / U, max (A)': pl.Float64, 'Current L1 / U, StdDev (A)': pl.Float64, 'Current L2 / V, max (A)': pl.Float64, 'Current L3 / W, max (A)': pl.Float64, 'Current L2 / V, min (A)': pl.Float64, 'Current L2 / V, StdDev (A)': pl.Float64, 'Current L3 / W, min (A)': pl.Float64, 'Current L3 / W, StdDev (A)': pl.Float64, 'Grid current, Max (A)': pl.Float64, 'Grid current, Min (A)': pl.Float64, 'Grid current, StdDev (A)': pl.Float64, 'Motor current axis 1, Max (A)': pl.Float64, 'Motor current axis 1, Min (A)': pl.Float64, 'Motor current axis 1, StdDev (A)': pl.Float64, 'Motor current axis 2, Max (A)': pl.Float64, 'Motor current axis 2, Min (A)': pl.Float64, 'Motor current axis 2, StdDev (A)': pl.Float64, 'Motor current axis 3, Max (A)': pl.Float64, 'Motor current axis 3, Min (A)': pl.Float64, 'Motor current axis 3, StdDev (A)': pl.Float64, 'Rotor speed (RPM)': pl.Float64, 'Generator RPM (RPM)': pl.Float64, 'Gearbox speed (RPM)': pl.Float64, 'Generator RPM, Max (RPM)': pl.Float64, 'Generator RPM, Min (RPM)': pl.Float64, 'Generator RPM, Standard deviation (RPM)': pl.Float64, 'Rotor speed, Max (RPM)': pl.Float64, 'Rotor speed, Min (RPM)': pl.Float64, 'Rotor speed, Standard deviation (RPM)': pl.Float64, 'Gearbox speed, Max (RPM)': pl.Float64, 'Gearbox speed, Min (RPM)': pl.Float64, 'Gearbox speed, StdDev (RPM)': pl.Float64, 'Capacity factor': pl.Float64, 'Data Availability': pl.Float64, 'Time-based Contractual Avail.': pl.Float64, 'Time-based IEC B.2.2 (Users View)': pl.Float64, 'Time-based IEC B.2.3 (Users View)': pl.Float64, 'Time-based IEC B.2.4 (Users View)': pl.Float64, 'Time-based IEC B.3.2 (Manufacturers View)': pl.Float64, 'Production-based IEC B.2.2 (Users View)': pl.Float64, 'Production-based IEC B.2.3 (Users View)': pl.Float64, 'Production-based IEC B.3.2 (Manufacturers View)': pl.Float64, 'Time-based System Avail.': pl.Float64, 'Production-based System Avail.': pl.Float64, 'Production-based Contractual Avail.': pl.Float64, 'Time-based System Avail. (Planned)': pl.Float64, 'Production-based System Avail. (virtual)': pl.Float64, 'Time-based Contractual Avail. (Global)': pl.Float64, 'Time-based Contractual Avail. (Custom)': pl.Float64, 'Production-based Contractual Avail. (Global)': pl.Float64, 'Production-based Contractual Avail. (Custom)': pl.Float64, 'Reactive Energy Export (kvarh)': pl.Float64, 'Reactive Energy Export counter (kvarh)': pl.Float64, 'Reactive Energy Import (kvarh)': pl.Float64, 'Reactive Energy Import counter (kvarh)': pl.Float64, 'Blade angle (pitch position) A (°)': pl.Float64, 'Blade angle (pitch position) B (°)': pl.Float64, 'Blade angle (pitch position) C (°)': pl.Float64, 'Yaw bearing angle (°)': pl.Float64, 'Blade angle (pitch position) A, Max (°)': pl.Float64, 'Blade angle (pitch position) A, Min (°)': pl.Float64, 'Blade angle (pitch position) A, Standard deviation (°)': pl.Float64, 'Blade angle (pitch position) B, Max (°)': pl.Float64, 'Blade angle (pitch position) B, Min (°)': pl.Float64, 'Blade angle (pitch position) B, Standard deviation (°)': pl.Float64, 'Blade angle (pitch position) C, Max (°)': pl.Float64, 'Blade angle (pitch position) C, Min (°)': pl.Float64, 'Blade angle (pitch position) C, Standard deviation (°)': pl.Float64, 'Yaw bearing angle, Max (°)': pl.Float64, 'Yaw bearing angle, Min (°)': pl.Float64, 'Yaw bearing angle, StdDev (°)': pl.Float64, 'Gear oil inlet pressure (bar)': pl.Float64, 'Gear oil pump pressure (bar)': pl.Float64, 'Gear oil inlet pressure, Max (bar)': pl.Float64, 'Gear oil inlet pressure, Min (bar)': pl.Float64, 'Gear oil inlet pressure, StdDev (bar)': pl.Float64, 'Gear oil pump pressure, Max (bar)': pl.Float64, 'Gear oil pump pressure, Min (bar)': pl.Float64, 'Gear oil pump pressure, StdDev (bar)': pl.Float64, 'Grid frequency (Hz)': pl.Float64, 'Grid frequency, Max (Hz)': pl.Float64, 'Grid frequency, Min (Hz)': pl.Float64, 'Grid frequency, Standard deviation (Hz)': pl.Float64, 'Equivalent Full Load Hours (s)': pl.Float64, 'Equivalent Full Load Hours counter (s)': pl.Float64, 'Production Factor': pl.Float64, 'Performance Index': pl.Float64, 'Apparent power (kVA)': pl.Float64, 'Apparent power, Max (kVA)': pl.Float64, 'Apparent power, Min (kVA)': pl.Float64, 'Apparent power, StdDev (kVA)': pl.Float64, 'Cable windings from calibration point': pl.Float64, 'Metal particle count': pl.Float64, 'Metal particle count counter': pl.Float64, 'Cable windings from calibration point, Max': pl.Float64, 'Cable windings from calibration point, Min': pl.Float64, 'Cable windings from calibration point, StdDev': pl.Float64, 'Drive train acceleration (mm/ss)': pl.Float64, 'Tower Acceleration X (mm/ss)': pl.Float64, 'Tower Acceleration y (mm/ss)': pl.Float64, 'Tower Acceleration X, Min (mm/ss)': pl.Float64, 'Tower Acceleration X, Max (mm/ss)': pl.Float64, 'Tower Acceleration Y, Min (mm/ss)': pl.Float64, 'Tower Acceleration Y, Max (mm/ss)': pl.Float64, 'Drive train acceleration, Max (mm/ss)': pl.Float64, 'Drive train acceleration, Min (mm/ss)': pl.Float64, 'Drive train acceleration, StdDev (mm/ss)': pl.Float64, 'Tower Acceleration X, StdDev (mm/ss)': pl.Float64, 'Tower Acceleration Y, StdDev (mm/ss)': pl.Float64, 'wt': pl.Utf8}
```

```{python}
#|  label: read wt data ab 2017

turbine_data_list_2017_2021 = [
    pl.read_csv(f"{folder_path_raw}/{fname}", 
    try_parse_dates=True, 
    skip_lines=9, 
    schema=schema_2017_2021,    
    null_values="NaN", 
    use_pyarrow=True,  
    ignore_errors=True).with_columns(pl.lit(fname).alias("wt")) for fname in fnames_turbine if fname.find("2022") == -1 ]

turbine_data_2017_2021 = pl.concat(turbine_data_list_2017_2021)
```


### Read 2022 - 2023 Turbine data

```{python}
#| label: wtdata schema2022-2023
#| echo: false

schema_2022_2023 = {'# Date and time': pl.Datetime, 'Wind speed (m/s)': pl.Float64, 'Wind speed, Standard deviation (m/s)': pl.Float64, 'Wind speed, Minimum (m/s)': pl.Float64, 'Wind speed, Maximum (m/s)': pl.Float64, 'Long Term Wind (m/s)': pl.Float64, 'Wind speed Sensor 1 (m/s)': pl.Float64, 'Wind speed Sensor 1, Standard deviation (m/s)': pl.Float64, 'Wind speed Sensor 1, Minimum (m/s)': pl.Float64, 'Wind speed Sensor 1, Maximum (m/s)': pl.Float64, 'Wind speed Sensor 2 (m/s)': pl.Float64, 'Wind speed Sensor 2, Standard deviation (m/s)': pl.Float64, 'Wind speed Sensor 2, Minimum (m/s)': pl.Float64, 'Wind speed Sensor 2, Maximum (m/s)': pl.Float64, 'Density adjusted wind speed (m/s)': pl.Float64, 'Wind direction (°)': pl.Float64, 'Nacelle position (°)': pl.Float64, 'Wind direction, Standard deviation (°)': pl.Float64, 'Wind direction, Minimum (°)': pl.Float64, 'Wind direction, Maximum (°)': pl.Float64, 'Nacelle position, Standard deviation (°)': pl.Float64, 'Nacelle position, Minimum (°)': pl.Float64, 'Nacelle position, Maximum (°)': pl.Float64, 'Vane position 1+2 (°)': pl.Float64, 'Vane position 1+2, Max (°)': pl.Float64, 'Vane position 1+2, Min (°)': pl.Float64, 'Vane position 1+2, StdDev (°)': pl.Float64, 'Energy Export (kWh)': pl.Float64, 'Energy Export counter (kWh)': pl.Float64, 'Energy Import (kWh)': pl.Float64, 'Energy Import counter (kWh)': pl.Float64, 'Lost Production (Contractual) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.2) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.3) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.2.4) (kWh)': pl.Float64, 'Lost Production (Time-based IEC B.3.2) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.2.2) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.2.3) (kWh)': pl.Float64, 'Lost Production (Production-based IEC B.3.2) (kWh)': pl.Float64, 'Energy Budget - Default (kWh)': pl.Float64, 'Energy Theoretical (kWh)': pl.Float64, 'Lost Production to Downtime (kWh)': pl.Float64, 'Lost Production to Performance (kWh)': pl.Float64, 'Lost Production Total (kWh)': pl.Float64, 'Lost Production to Curtailment (Total) (kWh)': pl.Float64, 'Lost Production to Curtailment (Grid) (kWh)': pl.Float64, 'Lost Production to Curtailment (Noise) (kWh)': pl.Float64, 'Lost Production to Curtailment (Shadow) (kWh)': pl.Float64, 'Lost Production to Curtailment (Bats) (kWh)': pl.Float64, 'Lost Production to Curtailment (Birds) (kWh)': pl.Float64, 'Lost Production to Curtailment (Ice) (kWh)': pl.Float64, 'Lost Production to Curtailment (Sector Management) (kWh)': pl.Float64, 'Lost Production to Curtailment (Technical) (kWh)': pl.Float64, 'Lost Production to Curtailment (Marketing) (kWh)': pl.Float64, 'Lost Production to Curtailment (Boat Action) (kWh)': pl.Float64, 'Compensated Lost Production (kWh)': pl.Float64, 'Virtual Production (kWh)': pl.Float64, 'Lost Production to Curtailment (Grid Constraint) (kWh)': pl.Float64, 'Lost Production to Downtime and Curtailment Total (kWh)': pl.Float64, 'Lost Production (Contractual Global) (kWh)': pl.Float64, 'Lost Production (Contractual Custom) (kWh)': pl.Float64, 'Power (kW)': pl.Float64, 'Potential power default PC (kW)': pl.Float64, 'Power, Standard deviation (kW)': pl.Float64, 'Power, Minimum (kW)': pl.Float64, 'Power, Maximum (kW)': pl.Float64, 'Potential power learned PC (kW)': pl.Float64, 'Potential power reference turbines (kW)': pl.Float64, 'Cascading potential power (kW)': pl.Float64, 'Cascading potential power for performance (kW)': pl.Float64, 'Potential power met mast anemometer (kW)': pl.Float64, 'Potential power primary reference turbines (kW)': pl.Float64, 'Potential power secondary reference turbines (kW)': pl.Float64, 'Turbine Power setpoint (kW)': pl.Float64, 'Potential power estimated (kW)': pl.Float64, 'Potential power MPC (kW)': pl.Float64, 'Potential power met mast anemometer MPC (kW)': pl.Float64, 'Potential Power Energy Budget (kW)': pl.Float64, 'Turbine Power setpoint, Max (kW)': pl.Float64, 'Turbine Power setpoint, Min (kW)': pl.Float64, 'Turbine Power setpoint, StdDev (kW)': pl.Float64, 'Available Capacity for Production (kW)': pl.Float64, 'Available Capacity for Production (Planned) (kW)': pl.Float64, 'Manufacturer Potential Power (SCADA) (kW)': pl.Float64, 'Power factor (cosphi)': pl.Float64, 'Power factor (cosphi), Max': pl.Float64, 'Power factor (cosphi), Min': pl.Float64, 'Power factor (cosphi), Standard deviation': pl.Float64, 'Reactive power (kvar)': pl.Float64, 'Reactive power, Max (kvar)': pl.Float64, 'Reactive power, Min (kvar)': pl.Float64, 'Reactive power, Standard deviation (kvar)': pl.Float64, 'Front bearing temperature (°C)': pl.Float64, 'Rear bearing temperature (°C)': pl.Float64, 'Stator temperature 1 (°C)': pl.Float64, 'Nacelle ambient temperature (°C)': pl.Float64, 'Nacelle temperature (°C)': pl.Float64, 'Transformer temperature (°C)': pl.Float64, 'Gear oil inlet temperature (°C)': pl.Float64, 'Generator bearing rear temperature (°C)': pl.Float64, 'Generator bearing front temperature (°C)': pl.Float64, 'Gear oil temperature (°C)': pl.Float64, 'Temp. top box (°C)': pl.Float64, 'Hub temperature (°C)': pl.Float64, 'Ambient temperature (converter) (°C)': pl.Float64, 'Rotor bearing temp (°C)': pl.Float64, 'Transformer cell temperature (°C)': pl.Float64, 'Front bearing temperature, Max (°C)': pl.Float64, 'Front bearing temperature, Min (°C)': pl.Float64, 'Front bearing temperature, Standard deviation (°C)': pl.Float64, 'Rear bearing temperature, Max (°C)': pl.Float64, 'Rear bearing temperature, Min (°C)': pl.Float64, 'Rear bearing temperature, Standard deviation (°C)': pl.Float64, 'Temperature motor axis 1 (°C)': pl.Float64, 'Temperature motor axis 2 (°C)': pl.Float64, 'Temperature motor axis 3 (°C)': pl.Float64, 'CPU temperature (°C)': pl.Float64, 'Nacelle temperature, Max (°C)': pl.Float64, 'Nacelle temperature, Min (°C)': pl.Float64, 'Generator bearing front temperature, Max (°C)': pl.Float64, 'Generator bearing front temperature, Min (°C)': pl.Float64, 'Generator bearing rear temperature, Max (°C)': pl.Float64, 'Generator bearing rear temperature, Min (°C)': pl.Float64, 'Generator bearing front temperature, Std (°C)': pl.Float64, 'Generator bearing rear temperature, Std (°C)': pl.Float64, 'Nacelle temperature, Standard deviation (°C)': pl.Float64, 'Gear oil temperature, Max (°C)': pl.Float64, 'Gear oil temperature, Min (°C)': pl.Float64, 'Gear oil temperature, Standard deviation (°C)': pl.Float64, 'Hub temperature, min (°C)': pl.Float64, 'Hub temperature, max (°C)': pl.Float64, 'Hub temperature, standard deviation (°C)': pl.Float64, 'Ambient temperature (converter), Max (°C)': pl.Float64, 'Ambient temperature (converter), Min (°C)': pl.Float64, 'Ambient temperature (converter), StdDev (°C)': pl.Float64, 'Gear oil inlet temperature, Max (°C)': pl.Float64, 'Gear oil inlet temperature, Min (°C)': pl.Float64, 'Gear oil inlet temperature, StdDev (°C)': pl.Float64, 'Nacelle ambient temperature, Max (°C)': pl.Float64, 'Nacelle ambient temperature, Min (°C)': pl.Float64, 'Nacelle ambient temperature, StdDev (°C)': pl.Float64, 'Rotor bearing temp, Max (°C)': pl.Float64, 'Rotor bearing temp, Min (°C)': pl.Float64, 'Rotor bearing temp, StdDev (°C)': pl.Float64, 'CPU temperature, Max (°C)': pl.Float64, 'CPU temperature, Min (°C)': pl.Float64, 'CPU temperature, StdDev (°C)': pl.Float64, 'Transformer cell temperature, Max (°C)': pl.Float64, 'Transformer cell temperature, Min (°C)': pl.Float64, 'Transformer cell temperature, StdDev (°C)': pl.Float64, 'Transformer temperature, Max (°C)': pl.Float64, 'Transformer temperature, Min (°C)': pl.Float64, 'Transformer temperature, StdDev (°C)': pl.Float64, 'Stator temperature 1, Max (°C)': pl.Float64, 'Stator temperature 1, Min (°C)': pl.Float64, 'Stator temperature 1, StdDev (°C)': pl.Float64, 'Temp. top box, Max (°C)': pl.Float64, 'Temp. top box, Min (°C)': pl.Float64, 'Temp. top box, StdDev (°C)': pl.Float64, 'Temperature motor axis 1, Max (°C)': pl.Float64, 'Temperature motor axis 1, Min (°C)': pl.Float64, 'Temperature motor axis 1, StdDev (°C)': pl.Float64, 'Temperature motor axis 2, Max (°C)': pl.Float64, 'Temperature motor axis 2, Min (°C)': pl.Float64, 'Temperature motor axis 2, StdDev (°C)': pl.Float64, 'Temperature motor axis 3, Max (°C)': pl.Float64, 'Temperature motor axis 3, Min (°C)': pl.Float64, 'Temperature motor axis 3, StdDev (°C)': pl.Float64, 'Voltage L1 / U (V)': pl.Float64, 'Voltage L2 / V (V)': pl.Float64, 'Voltage L3 / W (V)': pl.Float64, 'Grid voltage (V)': pl.Float64, 'Grid voltage, Max (V)': pl.Float64, 'Grid voltage, Min (V)': pl.Float64, 'Grid voltage, Standard deviation (V)': pl.Float64, 'Voltage L1 / U, Min (V)': pl.Float64, 'Voltage L1 / U, Max (V)': pl.Float64, 'Voltage L1 / U, Standard deviation (V)': pl.Float64, 'Voltage L2 / V, Min (V)': pl.Float64, 'Voltage L2 / V, Max (V)': pl.Float64, 'Voltage L2 / V, Standard deviation (V)': pl.Float64, 'Voltage L3 / W, Min (V)': pl.Float64, 'Voltage L3 / W, Max (V)': pl.Float64, 'Voltage L3 / W, Standard deviation (V)': pl.Float64, 'Current L1 / U (A)': pl.Float64, 'Current L2 / V (A)': pl.Float64, 'Current L3 / W (A)': pl.Float64, 'Grid current (A)': pl.Float64, 'Motor current axis 1 (A)': pl.Float64, 'Motor current axis 2 (A)': pl.Float64, 'Motor current axis 3 (A)': pl.Float64, 'Current L1 / U, min (A)': pl.Float64, 'Current L1 / U, max (A)': pl.Float64, 'Current L1 / U, StdDev (A)': pl.Float64, 'Current L2 / V, max (A)': pl.Float64, 'Current L3 / W, max (A)': pl.Float64, 'Current L2 / V, min (A)': pl.Float64, 'Current L2 / V, StdDev (A)': pl.Float64, 'Current L3 / W, min (A)': pl.Float64, 'Current L3 / W, StdDev (A)': pl.Float64, 'Grid current, Max (A)': pl.Float64, 'Grid current, Min (A)': pl.Float64, 'Grid current, StdDev (A)': pl.Float64, 'Motor current axis 1, Max (A)': pl.Float64, 'Motor current axis 1, Min (A)': pl.Float64, 'Motor current axis 1, StdDev (A)': pl.Float64, 'Motor current axis 2, Max (A)': pl.Float64, 'Motor current axis 2, Min (A)': pl.Float64, 'Motor current axis 2, StdDev (A)': pl.Float64, 'Motor current axis 3, Max (A)': pl.Float64, 'Motor current axis 3, Min (A)': pl.Float64, 'Motor current axis 3, StdDev (A)': pl.Float64, 'Rotor speed (RPM)': pl.Float64, 'Generator RPM (RPM)': pl.Float64, 'Gearbox speed (RPM)': pl.Float64, 'Generator RPM, Max (RPM)': pl.Float64, 'Generator RPM, Min (RPM)': pl.Float64, 'Generator RPM, Standard deviation (RPM)': pl.Float64, 'Rotor speed, Max (RPM)': pl.Float64, 'Rotor speed, Min (RPM)': pl.Float64, 'Rotor speed, Standard deviation (RPM)': pl.Float64, 'Gearbox speed, Max (RPM)': pl.Float64, 'Gearbox speed, Min (RPM)': pl.Float64, 'Gearbox speed, StdDev (RPM)': pl.Float64, 'Capacity factor': pl.Float64, 'Data Availability': pl.Float64, 'Time-based Contractual Avail.': pl.Float64, 'Time-based IEC B.2.2 (Users View)': pl.Float64, 'Time-based IEC B.2.3 (Users View)': pl.Float64, 'Time-based IEC B.2.4 (Users View)': pl.Float64, 'Time-based IEC B.3.2 (Manufacturers View)': pl.Float64, 'Production-based IEC B.2.2 (Users View)': pl.Float64, 'Production-based IEC B.2.3 (Users View)': pl.Float64, 'Production-based IEC B.3.2 (Manufacturers View)': pl.Float64, 'Time-based System Avail.': pl.Float64, 'Production-based System Avail.': pl.Float64, 'Production-based Contractual Avail.': pl.Float64, 'Time-based System Avail. (Planned)': pl.Float64, 'Production-based System Avail. (virtual)': pl.Float64, 'Time-based Contractual Avail. (Global)': pl.Float64, 'Time-based Contractual Avail. (Custom)': pl.Float64, 'Production-based Contractual Avail. (Global)': pl.Float64, 'Production-based Contractual Avail. (Custom)': pl.Float64, 'Reactive Energy Export (kvarh)': pl.Float64, 'Reactive Energy Export counter (kvarh)': pl.Float64, 'Reactive Energy Import (kvarh)': pl.Float64, 'Reactive Energy Import counter (kvarh)': pl.Float64, 'Blade angle (pitch position) A (°)': pl.Float64, 'Blade angle (pitch position) B (°)': pl.Float64, 'Blade angle (pitch position) C (°)': pl.Float64, 'Yaw bearing angle (°)': pl.Float64, 'Blade angle (pitch position) A, Max (°)': pl.Float64, 'Blade angle (pitch position) A, Min (°)': pl.Float64, 'Blade angle (pitch position) A, Standard deviation (°)': pl.Float64, 'Blade angle (pitch position) B, Max (°)': pl.Float64, 'Blade angle (pitch position) B, Min (°)': pl.Float64, 'Blade angle (pitch position) B, Standard deviation (°)': pl.Float64, 'Blade angle (pitch position) C, Max (°)': pl.Float64, 'Blade angle (pitch position) C, Min (°)': pl.Float64, 'Blade angle (pitch position) C, Standard deviation (°)': pl.Float64, 'Yaw bearing angle, Max (°)': pl.Float64, 'Yaw bearing angle, Min (°)': pl.Float64, 'Yaw bearing angle, StdDev (°)': pl.Float64, 'Gear oil inlet pressure (bar)': pl.Float64, 'Gear oil pump pressure (bar)': pl.Float64, 'Gear oil inlet pressure, Max (bar)': pl.Float64, 'Gear oil inlet pressure, Min (bar)': pl.Float64, 'Gear oil inlet pressure, StdDev (bar)': pl.Float64, 'Gear oil pump pressure, Max (bar)': pl.Float64, 'Gear oil pump pressure, Min (bar)': pl.Float64, 'Gear oil pump pressure, StdDev (bar)': pl.Float64, 'Grid frequency (Hz)': pl.Float64, 'Grid frequency, Max (Hz)': pl.Float64, 'Grid frequency, Min (Hz)': pl.Float64, 'Grid frequency, Standard deviation (Hz)': pl.Float64, 'Equivalent Full Load Hours (s)': pl.Float64, 'Equivalent Full Load Hours counter (s)': pl.Float64, 'Production Factor': pl.Float64, 'Performance Index': pl.Float64, 'Investment Performance Ratio': pl.Float64, 'Operating Performance Ratio': pl.Float64, 'Apparent power (kVA)': pl.Float64, 'Apparent power, Max (kVA)': pl.Float64, 'Apparent power, Min (kVA)': pl.Float64, 'Apparent power, StdDev (kVA)': pl.Float64, 'Cable windings from calibration point': pl.Float64, 'Metal particle count': pl.Float64, 'Metal particle count counter': pl.Float64, 'Cable windings from calibration point, Max': pl.Float64, 'Cable windings from calibration point, Min': pl.Float64, 'Cable windings from calibration point, StdDev': pl.Float64, 'Drive train acceleration (mm/ss)': pl.Float64, 'Tower Acceleration X (mm/ss)': pl.Float64, 'Tower Acceleration y (mm/ss)': pl.Float64, 'Tower Acceleration X, Min (mm/ss)': pl.Float64, 'Tower Acceleration X, Max (mm/ss)': pl.Float64, 'Tower Acceleration Y, Min (mm/ss)': pl.Float64, 'Tower Acceleration Y, Max (mm/ss)': pl.Float64, 'Drive train acceleration, Max (mm/ss)': pl.Float64, 'Drive train acceleration, Min (mm/ss)': pl.Float64, 'Drive train acceleration, StdDev (mm/ss)': pl.Float64, 'Tower Acceleration X, StdDev (mm/ss)': pl.Float64, 'Tower Acceleration Y, StdDev (mm/ss)': pl.Float64, 'wt': pl.Utf8}

```

```{python}
#|  label: read wt data ab 2022

# Read each CSV and add a column with the file name
turbine_data_list_2022_2023 = [
    pl.read_csv(f"{folder_path_raw}/{fname}", 
    try_parse_dates=True, 
    skip_lines=9, 
    schema=schema_2022_2023,    
    null_values="NaN", 
    use_pyarrow=True,  
    ignore_errors=True).with_columns(pl.lit(fname).alias("wt")) for fname in fnames_turbine if fname.find("2022") != -1 or fname.find("2023") !=-1]

turbine_data_2022_2023 = pl.concat(turbine_data_list_2022_2023)
```

....concatenate all turbine data and save .parquet file

```{python}
#| label: one df for wt data

turbine_data = pl.concat([turbine_data_2017_2021, turbine_data_2022_2023], how="diagonal")

turbine_data = turbine_data.rename({"# Date and time": "timestamp"})

# Id turbines 
turbine_data = turbine_data.with_columns([
    pl.when(pl.col("wt").str.contains("_1_"))
    .then(pl.lit("T01"))
    .when(pl.col("wt").str.contains("_2_"))
    .then(pl.lit("T02"))
    .when(pl.col("wt").str.contains("_3_"))
    .then(pl.lit("T03"))
    .when(pl.col("wt").str.contains("_4_"))
    .then(pl.lit("T04"))
    .when(pl.col("wt").str.contains("_5_"))
    .then(pl.lit("T05"))
    .when(pl.col("wt").str.contains("_6_"))
    .then(pl.lit("T06"))
    .otherwise(pl.col("wt"))
    .alias("wt")
    ])

turbine_data = turbine_data.with_columns([
    pl.col("timestamp").cast(pl.Datetime).dt.replace_time_zone("UTC").alias("timestamp")
    ])


```

Save .parquet

```{python}

# Get metadata for filename
first_ts = turbine_data["timestamp"].min().strftime("%Y%m%d")
last_ts = turbine_data["timestamp"].max().strftime("%Y%m%d")
freq = "10min"
n_rows = len(turbine_data)

# Additional metadata options
n_cols = len(turbine_data.columns)

filename = f"Kelmarsh_Turbines_Data_{freq}_{first_ts}_{last_ts}_n{n_rows}_cols{n_cols}.parquet"

turbine_data.write_parquet(f"{folder_path_interim}\{filename}")

```


```{python}
#| label: resampling
#| eval: true

meteo_15min = meteo.group_by_dynamic("timestamp", every="15m", closed="left").agg([pl.col(col).mean() for col in meteo.columns if col != "timestamp"])
relative_humidity_15min = relative_humidity.upsample("timestamp", every="15m").fill_null(strategy="forward")

```


```{python}
#| label: joining
#| eval: true

meteo_all = meteo_15min.join(relative_humidity_15min, on="timestamp",how="left")
silistea = meteo_all.join(production, on="timestamp", how="left")
```

```{python}
#| label: saving 
#| eval: true

# Get metadata for filename
first_ts = silistea["timestamp"].min().strftime("%Y%m%d")
last_ts = silistea["timestamp"].max().strftime("%Y%m%d")
freq = "15min"
n_rows = len(silistea)

# Additional metadata options
null_pct = int(silistea["kWh"].null_count() / len(silistea) * 100)
n_cols = len(silistea.columns)

filename = f"Silistea_{freq}_{first_ts}_{last_ts}_n{n_rows}_cols{n_cols}_null{null_pct}pct.parquet"

# Save processed dataset
silistea.write_parquet(f"{folder_path_interim}\{filename}")

# Print filename for verification
print(f"Saved as: {filename}")

```

```{python}
#| label: dataset id
#| eval: false


# silistea = silistea.with_columns(
#     pl.when(pl.col('kWh').is_null())
#     .then("test")    
#     .otherwise("train")
#     .alias('dataset'))

# silistea = silistea.with_columns(pl.lit("train").alias("dataset"))

# Get indices where kWh is null
# null_indices = silistea.with_row_count("index").filter(pl.col("kWh").is_null()).get_column("index")


# Print the indices
# print(null_indices.to_list())

# silistea = silistea.with_columns([
#     pl.when(pl.arange(0, len(silistea)).is_in(null_indices))
#     .then("test")
#     .otherwise("train")
#     .alias("dataset")
# ])

# # Verify the changes
# print(silistea.filter(pl.col("dataset") == "test").select(["timestamp", "kWh", "dataset"]))

# test_df = silistea.filter(pl.col("kWh").is_null())

```
