---
title: "Windpark Kelmarsh (2016) - 12.5 MW"
subtitle: Data Analysis
author: "Jorge A. Thomas"
format: html
jupyter: python3
---

## Data Analysis an Testing Great Tables

Infor available here: 

- https://energymap.co.uk/project.asp?pageid=2948

- https://www.gem.wiki/Kelmarsh_wind_farm

```{python}
#| label: init
#| eval: true
#| echo: false

import os
from pathlib import Path
import duckdb
import polars as pl
import polars.selectors as cs
import plotly.express as px
from great_tables import GT, md

PROJECT_ROOT = Path(__file__).parent.parent.parent.parent
folder_path_interim = PROJECT_ROOT / "data" / "interim"
```

Read parquet files

```{python}

wtstatus = pl.read_parquet(f"{folder_path_interim}/Kelmarsh_Turbines_Status_20160114_20230109_n385133_cols12.parquet")

duckdb.sql("DESCRIBE wtstatus").show()
wtstatus
```

Filter Forced Outages

```{python}

# Aggregate tables using SQL syntax
fo = pl.sql(
    """
    SELECT * EXCLUDE ("Custom contract category")    
    FROM wtstatus
    WHERE "IEC category" = 'Forced outage'
    """).collect()
```

Add Time Between Failure (TBF) and Time To Failure (TTF)

```{python}

# TTF
fo_rep = fo.with_columns(
    (pl.col("Timestamp start").shift(-1) - pl.col("Timestamp end")).shift(1).alias("TTF")    
    ).rename({"Duration":"TTR"})

fo = fo_rep.filter(pl.col("TTF") > pl.duration(seconds=0))

fo = fo.with_columns(pl.col("Timestamp start").diff().alias("TBF"))

```

```{python}

# pl.sql(
#     """
#     SELECT wt AS "Wind Turbine",
#            YEAR([Timestamp start]) AS Year
 ##strftime('%Y', [Timestamp start]) AS Year
#     FROM fo    
#     """).collect()


```

```{python}
#| label: forced outages

fo_yearly = (
    fo.filter(pl.col('IEC category')  == 'Forced outage')
    .group_by("wt",
              pl.col("Timestamp start").dt.year().alias("Year"))
    .agg(
        pl.len().alias("Forced Outages (IEC)"),
        pl.sum("TTR").alias("Yearly Duration")
        # pl.dt.total_seconds().mean("TTR").alias("MTTR"),
        )
    .rename({"wt": "Turbine"})
    .sort("Turbine", "Year") 
)

fo_yearly

# pl.sql(
#     """
#     SELECT *
#     FROM fo_yearly ORDER BY Year, Turbine
#     """).collect()

```


```{python}




```