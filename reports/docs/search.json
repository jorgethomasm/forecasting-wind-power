[
  {
    "objectID": "Kelmarsh_reliability_eval.html",
    "href": "Kelmarsh_reliability_eval.html",
    "title": "Windpark Kelmarsh (2016) - 12.5 MW",
    "section": "",
    "text": "“Kelmarsh Wind Farm is located near Haselbach, Northamptonshire and comprises six 2.05MW Senvion MM92 turbines. The Project was acquired from EON in December 2014 and was constructed in joint venture with Santander using balance sheet finance. Construction was completed in April 2016. It is now owned by Cubico Investments.”\n\nhttps://www.blue-energyco.com/our-projects/kelmarsh/\n\n\n\n\n\n\n\n\n\nKelmarsh Wind Farm\n\n\n\n\n\n\n\nSenvion MM92 turbine\n\n\n\n\n\n\nFigure 1: Near Haselbach, Northamptonshire (UK).\n\n\n\nRead parquet files\n\n\nShow the code\n```{python}\n#| label: Read-Data\ntstatus = pl.read_parquet(f\"{folder_path_interim}Kelmarsh_Turbines_Status_20160114_20230109_n385133_cols12.parquet\")\n\ntstatus\n```\n\n\n\nshape: (385_133, 12)\n\n\n\nTimestamp start\nTimestamp end\nStatus\nCode\nMessage\nComment\nService contract category\nIEC category\nwt\nGlobal contract category\nCustom contract category\nDuration\n\n\ndatetime[μs, UTC]\ndatetime[μs, UTC]\nstr\ni64\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nduration[μs]\n\n\n\n\n2016-01-14 19:28:03 UTC\n2016-01-23 14:36:32 UTC\n\"Stop\"\n111\n\"Emergency stop nacelle\"\nnull\n\"Emergency stop switch (Nacelle…\n\"Forced outage\"\n\"T01\"\nnull\nnull\n8d 19h 8m 29s\n\n\n2016-01-14 19:28:03 UTC\n2016-01-14 19:38:03 UTC\n\"Warning\"\n5720\n\"Brake accumulator defect\"\nnull\n\"Warnings (27)\"\nnull\n\"T01\"\nnull\nnull\n10m\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 11:27:46 UTC\n\"Informational\"\n3835\n\"Cable panel breaker open\"\nnull\n\"Warnings (27)\"\nnull\n\"T01\"\nnull\nnull\n8d 15h 59m 41s\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 11:27:46 UTC\n\"Informational\"\n3830\n\"Supply circuit breaker earthed\"\nnull\n\"Warnings (27)\"\n\"Full Performance\"\n\"T01\"\nnull\nnull\n8d 15h 59m 41s\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 14:09:18 UTC\n\"Warning\"\n3870\n\"Overload transformer fan outle…\nnull\n\"Warnings (27)\"\n\"Full Performance\"\n\"T01\"\nnull\nnull\n8d 18h 41m 13s\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n2022-12-31 12:28:30 UTC\nnull\n\"Informational\"\n100160\n\"System test 3\"\nnull\nnull\n\"Technical Standby\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:28:45 UTC\nnull\n\"Informational\"\n100180\n\"Run-up\"\nnull\nnull\n\"Technical Standby\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:30:58 UTC\nnull\n\"Informational\"\n100190\n\"Mains connection\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:31:08 UTC\nnull\n\"Informational\"\n100200\n\"Mains run-up\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:31:38 UTC\nnull\n\"Informational\"\n100210\n\"Mains operation\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n\n\n\n\nFilter Stop\n\n\nShow the code\n```{python}\n#| label: Filter-Stops\n\nstops = pl.sql(    \n    \"\"\"\n    SELECT * EXCLUDE (\"Custom contract category\")    \n    FROM tstatus\n    WHERE \"Status\" = 'Stop'\n    \"\"\").collect()\n```\n\n\nFilter Forced Outages\n\n\nShow the code\n```{python}\n#| label: Filter-Forced-Outages\n\n# Aggregate tables using SQL syntax\nfoutages = pl.sql(\n    \"\"\"\n    SELECT * \n    FROM stops\n    WHERE \"IEC category\" = 'Forced outage' \n    \"\"\").collect()\n\nfoutages = foutages.rename({\"Duration\":\"TTR\"})\n\n# TTF\nfoutages = foutages.with_columns(\n    (pl.col(\"Timestamp start\").shift(-1) - pl.col(\"Timestamp end\")).shift(1).alias(\"TTF\")\n    )\n\nfoutages = foutages.with_columns(\n    pl.when(pl.col(\"TTF\") &lt; 0).then(None).otherwise(pl.col(\"TTF\")).alias(\"TTF\")\n)\n\nfoutages\n```\n\n\n\nshape: (892, 12)\n\n\n\nTimestamp start\nTimestamp end\nStatus\nCode\nMessage\nComment\nService contract category\nIEC category\nwt\nGlobal contract category\nTTR\nTTF\n\n\ndatetime[μs, UTC]\ndatetime[μs, UTC]\nstr\ni64\nstr\nstr\nstr\nstr\nstr\nstr\nduration[μs]\nduration[μs]\n\n\n\n\n2016-01-14 19:28:03 UTC\n2016-01-23 14:36:32 UTC\n\"Stop\"\n111\n\"Emergency stop nacelle\"\nnull\n\"Emergency stop switch (Nacelle…\n\"Forced outage\"\n\"T01\"\nnull\n8d 19h 8m 29s\nnull\n\n\n2016-01-23 15:05:30 UTC\n2016-01-23 15:06:42 UTC\n\"Stop\"\n117\n\"Emergency stop base box\"\nnull\n\"Emergency stop switch (Convert…\n\"Forced outage\"\n\"T01\"\nnull\n1m 12s\n28m 58s\n\n\n2016-01-24 16:51:17 UTC\n2016-02-01 19:46:41 UTC\n\"Stop\"\n3110\n\"Frequency converter error\"\nnull\n\"Generator and Converter errors…\n\"Forced outage\"\n\"T01\"\nnull\n8d 2h 55m 24s\n1d 1h 44m 35s\n\n\n2016-02-11 14:36:37 UTC\n2016-02-11 15:14:50 UTC\n\"Stop\"\n3585\n\"Maximum grid frequency\"\nnull\n\"External stop (grid) (4)\"\n\"Forced outage\"\n\"T01\"\nnull\n38m 13s\n9d 18h 49m 56s\n\n\n2016-03-01 17:33:14 UTC\n2016-03-01 17:35:14 UTC\n\"Stop\"\n3000\n\"Frequency converter not ready\"\nnull\n\"Generator and Converter errors…\n\"Forced outage\"\n\"T01\"\nnull\n2m\n19d 2h 18m 24s\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n2022-05-11 14:08:43 UTC\n2022-05-11 14:31:27 UTC\n\"Stop\"\n555\n\"Pitch angle deviation\"\nnull\n\"Pitch errors (18)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n22m 44s\n2h 55m 14s\n\n\n2022-05-12 02:37:43 UTC\n2022-05-19 11:19:38 UTC\n\"Stop\"\n555\n\"Pitch angle deviation\"\n\"Pitch fault - techs attended o…\n\"Pitch errors (18)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n7d 8h 41m 55s\n12h 6m 16s\n\n\n2022-07-11 08:13:14 UTC\n2022-07-11 13:48:21 UTC\n\"Stop\"\n6530\n\"Anemometer defect\"\n\"Anemometer failed and replaced\"\n\"Sensor error (21)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n5h 35m 7s\n52d 20h 53m 36s\n\n\n2022-07-19 13:17:02 UTC\n2022-07-19 18:11:27 UTC\n\"Stop\"\n3151\n\"Max.temp.conv.inl.&gt;perm.out.t.\"\n\"Converters overheating due to …\n\"Temperature error (22)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n4h 54m 25s\n7d 23h 28m 41s\n\n\n2022-11-02 17:39:07 UTC\n2022-11-02 18:25:51 UTC\n\"Stop\"\n21\n\"Manual stop - remote\"\nnull\n\"Remote stop (30)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n46m 44s\n105d 23h 27m 40s"
  },
  {
    "objectID": "Kelmarsh_reliability_eval.html#project-overview",
    "href": "Kelmarsh_reliability_eval.html#project-overview",
    "title": "Windpark Kelmarsh (2016) - 12.5 MW",
    "section": "",
    "text": "“Kelmarsh Wind Farm is located near Haselbach, Northamptonshire and comprises six 2.05MW Senvion MM92 turbines. The Project was acquired from EON in December 2014 and was constructed in joint venture with Santander using balance sheet finance. Construction was completed in April 2016. It is now owned by Cubico Investments.”\n\nhttps://www.blue-energyco.com/our-projects/kelmarsh/\n\n\n\n\n\n\n\n\n\nKelmarsh Wind Farm\n\n\n\n\n\n\n\nSenvion MM92 turbine\n\n\n\n\n\n\nFigure 1: Near Haselbach, Northamptonshire (UK).\n\n\n\nRead parquet files\n\n\nShow the code\n```{python}\n#| label: Read-Data\ntstatus = pl.read_parquet(f\"{folder_path_interim}Kelmarsh_Turbines_Status_20160114_20230109_n385133_cols12.parquet\")\n\ntstatus\n```\n\n\n\nshape: (385_133, 12)\n\n\n\nTimestamp start\nTimestamp end\nStatus\nCode\nMessage\nComment\nService contract category\nIEC category\nwt\nGlobal contract category\nCustom contract category\nDuration\n\n\ndatetime[μs, UTC]\ndatetime[μs, UTC]\nstr\ni64\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nduration[μs]\n\n\n\n\n2016-01-14 19:28:03 UTC\n2016-01-23 14:36:32 UTC\n\"Stop\"\n111\n\"Emergency stop nacelle\"\nnull\n\"Emergency stop switch (Nacelle…\n\"Forced outage\"\n\"T01\"\nnull\nnull\n8d 19h 8m 29s\n\n\n2016-01-14 19:28:03 UTC\n2016-01-14 19:38:03 UTC\n\"Warning\"\n5720\n\"Brake accumulator defect\"\nnull\n\"Warnings (27)\"\nnull\n\"T01\"\nnull\nnull\n10m\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 11:27:46 UTC\n\"Informational\"\n3835\n\"Cable panel breaker open\"\nnull\n\"Warnings (27)\"\nnull\n\"T01\"\nnull\nnull\n8d 15h 59m 41s\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 11:27:46 UTC\n\"Informational\"\n3830\n\"Supply circuit breaker earthed\"\nnull\n\"Warnings (27)\"\n\"Full Performance\"\n\"T01\"\nnull\nnull\n8d 15h 59m 41s\n\n\n2016-01-14 19:28:05 UTC\n2016-01-23 14:09:18 UTC\n\"Warning\"\n3870\n\"Overload transformer fan outle…\nnull\n\"Warnings (27)\"\n\"Full Performance\"\n\"T01\"\nnull\nnull\n8d 18h 41m 13s\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n2022-12-31 12:28:30 UTC\nnull\n\"Informational\"\n100160\n\"System test 3\"\nnull\nnull\n\"Technical Standby\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:28:45 UTC\nnull\n\"Informational\"\n100180\n\"Run-up\"\nnull\nnull\n\"Technical Standby\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:30:58 UTC\nnull\n\"Informational\"\n100190\n\"Mains connection\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:31:08 UTC\nnull\n\"Informational\"\n100200\n\"Mains run-up\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n2022-12-31 12:31:38 UTC\nnull\n\"Informational\"\n100210\n\"Mains operation\"\nnull\nnull\n\"Full Performance\"\n\"T06\"\nnull\nnull\nnull\n\n\n\n\n\n\nFilter Stop\n\n\nShow the code\n```{python}\n#| label: Filter-Stops\n\nstops = pl.sql(    \n    \"\"\"\n    SELECT * EXCLUDE (\"Custom contract category\")    \n    FROM tstatus\n    WHERE \"Status\" = 'Stop'\n    \"\"\").collect()\n```\n\n\nFilter Forced Outages\n\n\nShow the code\n```{python}\n#| label: Filter-Forced-Outages\n\n# Aggregate tables using SQL syntax\nfoutages = pl.sql(\n    \"\"\"\n    SELECT * \n    FROM stops\n    WHERE \"IEC category\" = 'Forced outage' \n    \"\"\").collect()\n\nfoutages = foutages.rename({\"Duration\":\"TTR\"})\n\n# TTF\nfoutages = foutages.with_columns(\n    (pl.col(\"Timestamp start\").shift(-1) - pl.col(\"Timestamp end\")).shift(1).alias(\"TTF\")\n    )\n\nfoutages = foutages.with_columns(\n    pl.when(pl.col(\"TTF\") &lt; 0).then(None).otherwise(pl.col(\"TTF\")).alias(\"TTF\")\n)\n\nfoutages\n```\n\n\n\nshape: (892, 12)\n\n\n\nTimestamp start\nTimestamp end\nStatus\nCode\nMessage\nComment\nService contract category\nIEC category\nwt\nGlobal contract category\nTTR\nTTF\n\n\ndatetime[μs, UTC]\ndatetime[μs, UTC]\nstr\ni64\nstr\nstr\nstr\nstr\nstr\nstr\nduration[μs]\nduration[μs]\n\n\n\n\n2016-01-14 19:28:03 UTC\n2016-01-23 14:36:32 UTC\n\"Stop\"\n111\n\"Emergency stop nacelle\"\nnull\n\"Emergency stop switch (Nacelle…\n\"Forced outage\"\n\"T01\"\nnull\n8d 19h 8m 29s\nnull\n\n\n2016-01-23 15:05:30 UTC\n2016-01-23 15:06:42 UTC\n\"Stop\"\n117\n\"Emergency stop base box\"\nnull\n\"Emergency stop switch (Convert…\n\"Forced outage\"\n\"T01\"\nnull\n1m 12s\n28m 58s\n\n\n2016-01-24 16:51:17 UTC\n2016-02-01 19:46:41 UTC\n\"Stop\"\n3110\n\"Frequency converter error\"\nnull\n\"Generator and Converter errors…\n\"Forced outage\"\n\"T01\"\nnull\n8d 2h 55m 24s\n1d 1h 44m 35s\n\n\n2016-02-11 14:36:37 UTC\n2016-02-11 15:14:50 UTC\n\"Stop\"\n3585\n\"Maximum grid frequency\"\nnull\n\"External stop (grid) (4)\"\n\"Forced outage\"\n\"T01\"\nnull\n38m 13s\n9d 18h 49m 56s\n\n\n2016-03-01 17:33:14 UTC\n2016-03-01 17:35:14 UTC\n\"Stop\"\n3000\n\"Frequency converter not ready\"\nnull\n\"Generator and Converter errors…\n\"Forced outage\"\n\"T01\"\nnull\n2m\n19d 2h 18m 24s\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n2022-05-11 14:08:43 UTC\n2022-05-11 14:31:27 UTC\n\"Stop\"\n555\n\"Pitch angle deviation\"\nnull\n\"Pitch errors (18)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n22m 44s\n2h 55m 14s\n\n\n2022-05-12 02:37:43 UTC\n2022-05-19 11:19:38 UTC\n\"Stop\"\n555\n\"Pitch angle deviation\"\n\"Pitch fault - techs attended o…\n\"Pitch errors (18)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n7d 8h 41m 55s\n12h 6m 16s\n\n\n2022-07-11 08:13:14 UTC\n2022-07-11 13:48:21 UTC\n\"Stop\"\n6530\n\"Anemometer defect\"\n\"Anemometer failed and replaced\"\n\"Sensor error (21)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n5h 35m 7s\n52d 20h 53m 36s\n\n\n2022-07-19 13:17:02 UTC\n2022-07-19 18:11:27 UTC\n\"Stop\"\n3151\n\"Max.temp.conv.inl.&gt;perm.out.t.\"\n\"Converters overheating due to …\n\"Temperature error (22)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n4h 54m 25s\n7d 23h 28m 41s\n\n\n2022-11-02 17:39:07 UTC\n2022-11-02 18:25:51 UTC\n\"Stop\"\n21\n\"Manual stop - remote\"\nnull\n\"Remote stop (30)\"\n\"Forced outage\"\n\"T06\"\n\"09 (Int) Fault\"\n46m 44s\n105d 23h 27m 40s"
  },
  {
    "objectID": "Kelmarsh_reliability_eval.html#time-series-for-binary-plot",
    "href": "Kelmarsh_reliability_eval.html#time-series-for-binary-plot",
    "title": "Windpark Kelmarsh (2016) - 12.5 MW",
    "section": "Time Series for Binary Plot",
    "text": "Time Series for Binary Plot\n\n\nShow the code\n```{python}\n#| label: Binary-Plot\n\ndtstarts = foutages.select([\"Timestamp start\", \"Status\", \"Message\",  \"wt\"]).rename({\"Timestamp start\": \"Timestamp\"})\ndtends = foutages.select([\"Timestamp end\", \"Status\", \"Message\",  \"wt\"]).with_columns(pl.lit(\"Start\").alias(\"Status\")).rename({\"Timestamp end\": \"Timestamp\"})\n\ntstates = pl.concat([dtstarts, dtends]).sort([\"wt\", 'Timestamp'])\n\n# tstates_ts = dtstarts.join(dtends, on=\"Timestamp\", how=\"full\").sort([\"wt\", 'Timestamp'])\n\ntstates= tstates.with_columns(\n    pl.when(pl.col(\"Status\") == \"Stop\").then(0).otherwise(1).alias(\"State\"),\n    pl.col(\"Timestamp\").dt.year().alias(\"Year\")    \n    )\n\ntstates= tstates.with_columns(    \n    (pl.col(\"wt\") + \"-\" + pl.col(\"Year\").cast(str)).alias(\"wt_Year\")\n    )\n\ntstates\n#TODO: remove missing years!\n```\n\n\n\nshape: (1_784, 7)\n\n\n\nTimestamp\nStatus\nMessage\nwt\nState\nYear\nwt_Year\n\n\ndatetime[μs, UTC]\nstr\nstr\nstr\ni32\ni32\nstr\n\n\n\n\n2016-01-14 19:28:03 UTC\n\"Stop\"\n\"Emergency stop nacelle\"\n\"T01\"\n0\n2016\n\"T01-2016\"\n\n\n2016-01-23 14:36:32 UTC\n\"Start\"\n\"Emergency stop nacelle\"\n\"T01\"\n1\n2016\n\"T01-2016\"\n\n\n2016-01-23 15:05:30 UTC\n\"Stop\"\n\"Emergency stop base box\"\n\"T01\"\n0\n2016\n\"T01-2016\"\n\n\n2016-01-23 15:06:42 UTC\n\"Start\"\n\"Emergency stop base box\"\n\"T01\"\n1\n2016\n\"T01-2016\"\n\n\n2016-01-24 16:51:17 UTC\n\"Stop\"\n\"Frequency converter error\"\n\"T01\"\n0\n2016\n\"T01-2016\"\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n2022-07-11 13:48:21 UTC\n\"Start\"\n\"Anemometer defect\"\n\"T06\"\n1\n2022\n\"T06-2022\"\n\n\n2022-07-19 13:17:02 UTC\n\"Stop\"\n\"Max.temp.conv.inl.&gt;perm.out.t.\"\n\"T06\"\n0\n2022\n\"T06-2022\"\n\n\n2022-07-19 18:11:27 UTC\n\"Start\"\n\"Max.temp.conv.inl.&gt;perm.out.t.\"\n\"T06\"\n1\n2022\n\"T06-2022\"\n\n\n2022-11-02 17:39:07 UTC\n\"Stop\"\n\"Manual stop - remote\"\n\"T06\"\n0\n2022\n\"T06-2022\"\n\n\n2022-11-02 18:25:51 UTC\n\"Start\"\n\"Manual stop - remote\"\n\"T06\"\n1\n2022\n\"T06-2022\"\n\n\n\n\n\n\n\n\nShow the code\n```{python}\n#| label: Find-Missing-Values\n\n# Get rows containing any null values\nmissing = (tstates\n          .with_row_count(\"row_index\")\n          .filter(pl.any_horizontal(pl.all().is_null()))\n          .sort(\"row_index\"))\n\n# Display rows with missing values\nprint(\"Rows containing missing values:\")\nprint(missing)\n\n# Get count of missing values per column\nprint(\"\\nMissing value counts per column:\")\nprint(tstates.null_count())\n```\n\n\nRows containing missing values:\nshape: (5, 8)\n┌───────────┬───────────────────┬────────┬────────────────────────┬─────┬───────┬──────┬─────────┐\n│ row_index ┆ Timestamp         ┆ Status ┆ Message                ┆ wt  ┆ State ┆ Year ┆ wt_Year │\n│ ---       ┆ ---               ┆ ---    ┆ ---                    ┆ --- ┆ ---   ┆ ---  ┆ ---     │\n│ u32       ┆ datetime[μs, UTC] ┆ str    ┆ str                    ┆ str ┆ i32   ┆ i32  ┆ str     │\n╞═══════════╪═══════════════════╪════════╪════════════════════════╪═════╪═══════╪══════╪═════════╡\n│ 426       ┆ null              ┆ Start  ┆ Emergency stop top box ┆ T02 ┆ 1     ┆ null ┆ null    │\n│ 427       ┆ null              ┆ Start  ┆ Safety chain open      ┆ T02 ┆ 1     ┆ null ┆ null    │\n│ 428       ┆ null              ┆ Start  ┆ Emergency stop nacelle ┆ T02 ┆ 1     ┆ null ┆ null    │\n│ 786       ┆ null              ┆ Start  ┆ Emergency stop top box ┆ T03 ┆ 1     ┆ null ┆ null    │\n│ 1486      ┆ null              ┆ Start  ┆ Overload gear oil pump ┆ T06 ┆ 1     ┆ null ┆ null    │\n└───────────┴───────────────────┴────────┴────────────────────────┴─────┴───────┴──────┴─────────┘\n\nMissing value counts per column:\nshape: (1, 7)\n┌───────────┬────────┬─────────┬─────┬───────┬──────┬─────────┐\n│ Timestamp ┆ Status ┆ Message ┆ wt  ┆ State ┆ Year ┆ wt_Year │\n│ ---       ┆ ---    ┆ ---     ┆ --- ┆ ---   ┆ ---  ┆ ---     │\n│ u32       ┆ u32    ┆ u32     ┆ u32 ┆ u32   ┆ u32  ┆ u32     │\n╞═══════════╪════════╪═════════╪═════╪═══════╪══════╪═════════╡\n│ 5         ┆ 0      ┆ 0       ┆ 0   ┆ 0     ┆ 5    ┆ 5       │\n└───────────┴────────┴─────────┴─────┴───────┴──────┴─────────┘\n\n\nC:\\Users\\SAL9000\\AppData\\Local\\Temp\\ipykernel_20864\\4106017410.py:3: DeprecationWarning:\n\n`DataFrame.with_row_count` is deprecated. Use `with_row_index` instead. Note that the default column name has changed from 'row_nr' to 'index'."
  },
  {
    "objectID": "Kelmarsh_reliability_eval.html#plot-square-signal",
    "href": "Kelmarsh_reliability_eval.html#plot-square-signal",
    "title": "Windpark Kelmarsh (2016) - 12.5 MW",
    "section": "Plot Square Signal",
    "text": "Plot Square Signal\n\n\nShow the code\n```{python}\n#| label: Square-Signal-Plot\n\nimport plotly.express as px\n\n# Other line_shape options, or interpolation methods between given points:\n\n# 'hv' step ends, equivalent to pyplot's post option;\n# 'vh' step starts;\n# 'hvh' step middles, x axis;\n# 'vhv' step middles, y axis;\n# 'spline' smooth curve between points;\n# 'linear' line segments between points, default value for line_shape.\n\nfig = px.line(tstates, x='Timestamp', y=\"State\", line_shape='hv', facet_row=\"wt_Year\", color=\"wt\",\n     title=\"Time / State Diagram for Kellmarsh Wind Turbines (2016-2022)\",\n     subtitle= \"(0) Down Step=Forced outage (IEC), (1) Up Step=Start\",\n     labels={\"Timestamp\": \"Time (UTC)\", \"State\": \"\", \"wt\": \"\"},facet_row_spacing=0.01 )\n\n# Update y-axis to show only 0 and 1 as labels\nfig.update_yaxes(\n    tickvals=[0, 1],  # Set tick values to 0 and 1\n    ticktext=[\"\", \"\"]  # Optional: Explicitly set tick text\n)\n\nfig.update_xaxes(matches=None, tickformat=\"%b\"  )\n\n\n# Update facet labels orientation and size\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"-\")[-1],textangle=0, xanchor='left', x=-0.04))  # Make labels horizontal\nfig.update_annotations(font_size=8)  # Reduce font size\n\nfig.show()\n```"
  }
]