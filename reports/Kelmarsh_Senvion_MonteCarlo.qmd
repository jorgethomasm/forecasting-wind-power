---
title: "Senvion M92: Monte Carlo Simulation"
subtitle: "Kelmarsh Wind Farm - 12.3 MW"
author: "Jorge A. Thomas"
date: "`r Sys.Date()`"
format:    
    html:
      theme: default
      self-contained: true
      code-fold: true
      df-print: tibble
      code-summary: "Show the code"
      toc: true
      toc-depth: 2
      grid: 
        margin-width: 350px      
execute: 
  echo: false
  engine: knitr
  engine-opt:
    r.path: "C:/Program Files/R/R-4.4.3/bin/R.exe"  
reference-location: margin 
citation-location: document
bibliography: references.bib
nocite: '@*'
---

```{r}
#| label: load-packages
#| echo: false

library(tidyverse)
library(plotly)
library(arrow)
library(here)
library(dunn.test)
library(fitdistrplus)
library(gt)
library(patchwork)
# library(paletteer)

fpath_processed <- "../data/processed"
fpath_interim <- "../data/interim/"
fpath_online <- "./online_assets/"

source(here("src", "R", "utils", "jthomfuncs.r"))
# theme_set(jthomggtheme)

relia <- read_parquet(here("data", "processed", "Kelmarsh_reliability_paramaters_2016_2022_n42_cols13.parquet"))
ttf <- read_parquet(here("data", "processed", "Kelmarsh_time-to-failure_2016_2022_n887_cols7.parquet"))
ttr <- read_parquet(here("data", "processed", "Kelmarsh_time-to-repair_2016_2022_n889_cols7.parquet"))

relia <- relia |> mutate(Turbine = as.factor(Turbine))
relia$icon <- NULL

ttf <- ttf |> mutate(across(all_of( c("Year", "Turbine")), ~ factor(.x, ordered = TRUE)))
ttr <- ttr |> mutate(across(all_of( c("Year", "Turbine")), ~ factor(.x, ordered = TRUE)))       
```

## Failure Rate Analysis 

### Checking for Homogeneity

```{r}
#| label: failure-rate-plot
#| eval: false

plt_bathtub <- ggplot(relia, aes(x=Year, y=`Failure Rate`, colour = Turbine)) +
  ggtitle("Bathtub Curve?") +
  geom_line() + geom_point() +
  #facet_grid(~Turbine) + 
  labs(y=expression(lambda ~ "[h"^{-1}*"]")) +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
```

### Between Turbines

```{r}
#| label: stat-test-frate-turbines
#| warning: true

# Summary statistics by turbine
relia |> group_by(Turbine) |> summarise(mean = mean(`Failure Rate`), median = median(`Failure Rate`), sd = sd(`Failure Rate`), n = n())

dunn_result_wt <- dunn.test(relia$`Failure Rate`, relia$Turbine, method="none", kw=TRUE, label=TRUE, wrap=TRUE)

```

### Between Years

```{r}
#| label: best-plot-clusters-years
#| eval: true

relia <- relia |> mutate(Year = as.factor(Year))

plt_boxplt_years <- ggplot(relia, aes(x = Year, y = `Failure Rate`)) +
  # geom_boxplot(fill = "grey", color = "black", alpha = 0.3) +  
  #see::geom_violinhalf(position = position_nudge(x = .2, y = 0), fill = "grey") +
  geom_violin(alpha = 0.5, fill="grey", adjust=0.75) +
  geom_dotplot(aes(color=Turbine, fill=Turbine), dotsize = 0.4, binaxis="y", show.legend=TRUE, stackdir= "center", alpha = 0.8) +
  stat_summary(fun=median, show.legend=FALSE, geom="crossbar", alpha=0.5, width=0.7) +
  # geom_jitter(aes(color=Turbine)) +    
  annotate("rect", xmin = 1.5, xmax = 6.5, ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.1) +
  labs(y=expression(lambda ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +     
  ggtitle("Yearly Failure Rates of Kelmarsh Wind Turbines - Senvion MM92")

```

```{r}
#| label: stat-test-frate-years
#| eval: true

# Summary statistics by Year
relia |>
  group_by(Year) |>
  summarise(mean = mean(`Failure Rate`), median = median(`Failure Rate`), sd = sd(`Failure Rate`), n = n())

dunn_result_year <- dunn.test(relia$`Failure Rate`, relia$Year, method="none", kw=TRUE, label=TRUE, wrap=TRUE)
```

Years from 2017 and 2021 represents a cluster of the Senvion M92 wind turbines.

- This assumes anemometer problem was fixed!
- Great base line operation monitoring

## Homogenous Failure Rate for Kelmarsh

```{r}
#| label: filter-2017to2021

relia_2017_2021 <- relia |> filter(Year != 2016 & Year != 2022)

```

```{r}
#| label: plot-lambda-per-wt

img <- cowplot::ggdraw() + cowplot::draw_image("./reports/online_assets/turbine-senvion_mm92.jpg")

plt_boxplt_wt <- ggplot(relia_2017_2021,  aes(x = Turbine, y = `Failure Rate`)) + 
  geom_violin(alpha = 0.5, fill="grey", adjust=0.75, show.legend=FALSE) +
  geom_jitter(aes(color=Year)) +
  # geom_dotplot(aes(color=Year, fill=Year), dotsize = 0.3, binaxis="y", show.legend=FALSE, stackdir= "center", alpha = 0.8) +
  stat_summary(fun=mean, show.legend=FALSE, geom="crossbar", alpha=0.5, width=0.7) +
  stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 5)), vjust = -1.2, color = "black",fontface = "bold") +  
  labs(y=expression(lambda ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Avg. Failure Rate (2017-2021) per Turbine at Kelmarsh")

plt_frate <- plt_boxplt_years / (plt_boxplt_wt + img)

plot(plt_frate)

# Save high quality PNG of plt_frate
# ggsave("./reports/online_assets/plt_frate.png", plt_frate, width = 12, height = 8, dpi = 300, bg = "white")

```

```{r}
#| label: constant-frates-per-turbine
#| eval: true

frates_cte <- relia_2017_2021 |>
  group_by(Turbine) |>
  summarise(mean(`Failure Rate`))

frates_cte
```

## Repairing Rates

```{r}
# Distribution analysis

ttr_2017_2021 <- ttr |> filter(Year != 2016 & Year != 2022)
ttf_2017_2021 <- ttf |> filter(Year != 2016 & Year != 2022)

```

```{r}

ggplot(ttr_2017_2021, aes(x = TTR)) +
  geom_histogram(bins = 30, fill = "#1E88E5", color = "black", alpha = 0.7) +
  facet_grid(~Turbine) + 
  labs(title = "Histogram of Time To Repair (TTR)",
       x = "Time To Repair (hours)",
       y = "Count") +
  theme_minimal()

```


```{r}
#| label: best-plot-clusters-years-repair
#| eval: true

plt_boxplt_years_r <- ggplot(relia, aes(x = Year, y = MTTR)) +
  #geom_boxplot(fill = "grey", color = "black", alpha = 0.3) +  
  geom_violin(alpha = 0.5) +
  geom_jitter(aes(color=Turbine)) +  
   annotate("rect", xmin = 1.5, xmax = 6.5, ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.1) +
  #labs(y = "Repair Rate [1/h]") +  # Changed to plain text
  labs(y=expression(mu ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Yearly Repair Rates of Kelmarsh Wind Turbines")

```


```{r}
#| label: best-plot-clusters-turbines-repair
#| eval: true

plt_boxplt_turbines_r <- ggplot(relia_2017_2021, aes(x = Turbine, y = 1/MTTR)) +
  #geom_boxplot(fill = "grey", color = "black", alpha = 0.3) +  
  geom_violin(alpha = 0.5) +
  geom_jitter(aes(color=Year)) +  
  #labs(y = "Repair Rate [1/h]") +  # Changed to plain text
  labs(y=expression(mu ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Repair Rates (2017-2021) for each Kelmarsh Wind Turbines")

plt_rrate <- plot(plt_boxplt_years_r / (plt_boxplt_turbines_r + img)) 
plt_rrate
 ```

## Fit pdf to Repair times

```{r}
#| label: fit-ttr-pdfs
#| eval: false

gof_list <- lapply(split(ttr_2017_2021, ttr_2017_2021$Turbine), function(df) {find_best_fit(df$Turbine, df$TTR)})

print(gof_list)
```

## Parameters per Wind Turbine

```{r}
#| label: fit-found-best-dist

# Fit a lognormal distribution to TTR for each Turbine using lapply
ttr_lnorm_fits <- lapply(split(ttr_2017_2021, ttr_2017_2021$Turbine), function(df) {fitdist(df$TTR, "lnorm")})

# Named list: each element is a fitdist object for a Turbine
ttr_lnorm_fits

```


```{r}
# Extract lognormal parameters from ttr_lnorm_fits
ttr_params <- lapply(names(ttr_lnorm_fits), function(turb) {
  fit <- ttr_lnorm_fits[[turb]]
  tibble(
    Turbine = turb,
    meanlog = fit$estimate["meanlog"],
    sdlog = fit$estimate["sdlog"]
  )
  }
) |> bind_rows()

# Combine with frates_cte
wt_sim_param <- frates_cte |>
  rename(frate =  `mean(\`Failure Rate\`)`) |>
  left_join(ttr_params, by = "Turbine")


```

## Simulation Parameters

```{r}
#| label: sim-parameters
#| eval: true

gt(wt_sim_param) |>
  tab_header(
    title = md("**Simulation Parameters per Wind Turbine**"),
    subtitle = "Estimated Distribution Parameters (2017:2021)"
  ) |>
  tab_spanner(label = "Failure Times", columns = c("frate")) |>
  tab_spanner(label = "Repair Times", columns = c("meanlog", "sdlog")
  ) |>
    fmt_number(
    columns = c(frate, meanlog, sdlog),
    decimals = 5
  ) |>
  cols_label(
    Turbine = md("**Turbine**"),
    frate = md("**λ [h⁻¹]**"),
    meanlog = md("**log(μ) [h]**"),
    sdlog = md("**log(σ) [h]**")
  ) |>
  tab_options(
    table.font.size = 16,
    heading.title.font.size = 20,
    heading.subtitle.font.size = 16,
    row.striping.background_color = "#f0f8ff"
  ) |> opt_row_striping()

```

```{r}
#| label: run-montecarlo

sim_start_datetime <- "2023-01-01 00"
sim_res_list <- lapply(split(wt_sim_param, wt_sim_param$Turbine), function(params) {montecarlo_sim(params, n_events=20000, dt_start=sim_start_datetime)})

montecarlo_events <- bind_rows(sim_res_list, .id = "Turbine")
montecarlo_events$Turbine <- as.factor(montecarlo_events$Turbine)
```


```{r}

A = sum(sim_df$ttf)/last(sim_df$total_time)

U = sum(sim_df$ttr)/last(sim_df$total_time)
```

```{r}
#| label: time-state-diagram

ggplot(montecarlo_events[1:500, ], aes(x = timestamp, y = state, color=Turbine)) +
  geom_step() +
  scale_y_continuous(limits = c(-0.01, 1.01), breaks = c(0, 1))
  labs(title = "Time / State Diagram for T01", x = "datetime", y = "State (1=Up, 0=Down)") +
  # facet_grid(rows=Turbine) + 
  theme_minimal()

```