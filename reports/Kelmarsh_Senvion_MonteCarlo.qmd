---
title: "Senvion M92: Monte Carlo Simulation"
subtitle: "Kelmarsh Wind Farm - 12.3 MW"
author: "Jorge A. Thomas"
date: "`r Sys.Date()`"
format:    
    html:
      theme: default
      self-contained: true
      code-fold: true
      df-print: tibble
      code-summary: "Show the code"
      toc: true
      toc-depth: 2
      grid: 
        margin-width: 350px      
execute: 
  echo: false
  engine: knitr
  engine-opt:
    r.path: "C:/Program Files/R/R-4.4.3/bin/R.exe"  
reference-location: margin 
citation-location: document
bibliography: references.bib
nocite: '@*'
---

```{r}
#| label: load-packages
#| echo: false

library(tidyverse)
library(plotly)
library(arrow)
library(here)
library(dunn.test)
library(fitdistrplus)
library(truncdist)
library(gt)
library(patchwork)
library(ggimage)

# library(paletteer)
options(future.globals.maxSize = 2 * 1024^3)
# conflict_prefer("select", "dplyr")

fpath_processed <- "../data/processed"
fpath_interim <- "../data/interim/"
fpath_online <- "./online_assets/"

source(here("src", "R", "utils", "jthomfuncs.r"))
# theme_set(jthomggtheme)

relia <- read_parquet(here("data", "processed", "Kelmarsh_reliability_paramaters_2016_2022_n42_cols13.parquet"))
ttf <- read_parquet(here("data", "processed", "Kelmarsh_time-to-failure_2016_2022_n887_cols7.parquet"))
ttr <- read_parquet(here("data", "processed", "Kelmarsh_time-to-repair_2016_2022_n889_cols7.parquet"))

relia <- relia |> mutate(Turbine = as.factor(Turbine))
relia$icon <- NULL

ttf <- ttf |> mutate(across(all_of( c("Year", "Turbine")), ~ factor(.x, ordered = TRUE)))
ttr <- ttr |> mutate(across(all_of( c("Year", "Turbine")), ~ factor(.x, ordered = TRUE)))       
```

## Failure Rate Analysis 

### Checking for Homogeneity

```{r}
#| label: failure-rate-plot
#| eval: false

plt_bathtub <- ggplot(relia, aes(x=Year, y=`Failure Rate`, colour = Turbine)) +
  ggtitle("Bathtub Curve?") +
  geom_line() + geom_point() +  
  labs(y=expression(lambda ~ "[h"^{-1}*"]")) +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
```

### Between Turbines

```{r}
#| label: stat-test-frate
#| eval: true
#| warning: true

# Summary statistics by turbine
relia |> 
  group_by(Turbine) |> 
  summarise(mean = mean(`Failure Rate`), median = median(`Failure Rate`), sd = sd(`Failure Rate`), n = n())

dunn_result_wt <- dunn.test(relia$`Failure Rate`, relia$Turbine, method="none", kw=TRUE, label=TRUE, wrap=TRUE)

# Summary statistics by Year
relia |>
  group_by(Year) |>
  summarise(mean = mean(`Failure Rate`), median = median(`Failure Rate`), sd = sd(`Failure Rate`), n = n())

dunn_result_year <- dunn.test(relia$`Failure Rate`, relia$Year, method="none", kw=TRUE, label=TRUE, wrap=TRUE)

```

### Between Years

```{r}
#| label: best-plot-clusters-years
#| eval: true

relia <- relia |> mutate(Year = as.factor(Year))

plt_boxplt_years <- ggplot(relia, aes(x = Year, y = `Failure Rate`)) +  
  geom_violin(alpha = 0.5, fill="grey", adjust=0.75) +
  geom_dotplot(aes(color=Turbine, fill=Turbine), dotsize = 0.4, binaxis="y", show.legend=TRUE, stackdir= "center", alpha = 0.8) +
  stat_summary(fun=median, show.legend=FALSE, geom="crossbar", alpha=0.5, width=0.7) +  
  annotate("rect", xmin = 1.5, xmax = 6.5, ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.1) +
  labs(y=expression(lambda ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +     
  ggtitle("Yearly Failure Rates of Kelmarsh Wind Turbines - Senvion MM92")

```

Years from 2017 and 2021 represents a cluster of the Senvion M92 wind turbines.

- This assumes anemometer problem was fixed!
- Great base line operation monitoring

## Homogenous Failure Rate for Kelmarsh

```{r}
#| label: plot-lambda-per-wt
#| eval: true

relia_2017_2021 <- relia |> filter(Year != 2016 & Year != 2022)

img <- cowplot::ggdraw() + cowplot::draw_image("./reports/online_assets/turbine-senvion_mm92.jpg")
# img <- cowplot::ggdraw() + cowplot::draw_image("./online_assets/turbine-senvion_mm92.jpg")

plt_boxplt_wt <- ggplot(relia_2017_2021,  aes(x = Turbine, y = `Failure Rate`)) + 
  geom_violin(alpha = 0.5, fill="grey", adjust=0.75, show.legend=FALSE) +
  geom_jitter(aes(color=Year)) +
  # geom_dotplot(aes(color=Year, fill=Year), dotsize = 0.3, binaxis="y", show.legend=FALSE, stackdir= "center", alpha = 0.8) +
  stat_summary(fun=mean, show.legend=FALSE, geom="crossbar", alpha=0.5, width=0.7) +
  stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 5)), vjust = -1.2, color = "black",fontface = "bold") +  
  labs(y=expression(lambda ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Avg. Failure Rate (2017-2021) per Turbine at Kelmarsh")

plt_frate <- plt_boxplt_years / (plt_boxplt_wt + img)

plot(plt_frate)

# Save PNG of plt_frate
# ggsave("./reports/online_assets/plt_frate.png", plt_frate, width = 12, height = 8, dpi = 300, bg = "white")

```

## Failure Rates

```{r}
#| label: constant-frates-per-turbine
#| eval: true

frates_cte <- relia_2017_2021 |>
  group_by(Turbine) |>
  summarise(mean(`Failure Rate`))

frates_cte |> gt()
```

## Repairing Rates

```{r}
# Distribution analysis

ttr_2017_2021 <- ttr |> filter(Year != 2016 & Year != 2022)
# ttf_2017_2021 <- ttf |> filter(Year != 2016 & Year != 2022)

```

```{r}
#| labe: ttr-histogram
#| eval: false

ggplot(ttr_2017_2021, aes(x = TTR)) +
  geom_histogram(bins = 30, fill = "#1E88E5", color = "black", alpha = 0.7) +
  facet_grid(~Turbine) + 
  labs(title = "Histogram of Time To Repair (TTR)",
       x = "Time To Repair (hours)",
       y = "Count") +
  theme_minimal()
```

```{r}
#| label: best-plot-clusters-turbines-repair
#| eval: true

plt_boxplt_years_r <- ggplot(relia, aes(x = Year, y = MTTR)) +  
  geom_violin(alpha = 0.5) +
  geom_jitter(aes(color=Turbine)) +  
   annotate("rect", xmin = 1.5, xmax = 6.5, ymin = -Inf, ymax = Inf, fill = "darkgreen", alpha = 0.1) +  
  labs(y=expression(mu ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Yearly Repair Rates of Kelmarsh Wind Turbines")

plt_boxplt_turbines_r <- ggplot(relia_2017_2021, aes(x = Turbine, y = 1/MTTR)) +  
  geom_violin(alpha = 0.5) +
  geom_jitter(aes(color=Year)) +    
  labs(y=expression(mu ~ "[h"^{-1}*"]"), x="") +  
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  ggtitle("Repair Rates (2017-2021) for each Kelmarsh Wind Turbines")

plt_rrate <- (plt_boxplt_years_r / (plt_boxplt_turbines_r + img)) 
plt_rrate

# Save PNG of plt_frate
# ggsave("./reports/online_assets/plt_frate.png", plt_rrate, width = 12, height = 8, dpi = 300, bg = "white")
 ```



```{r}
#| label: fit-ttr-pdfs
#| eval: false

gof_list <- lapply(split(ttr_2017_2021, ttr_2017_2021$Turbine), function(df) {find_best_fit(df$Turbine, df$TTR)})
print(gof_list)
```

## Fit Best PDF to Repair Times (TTRs)

```{r}
#| label: fit-found-best-dist
#| eval: true

# Fit a lognormal distribution to TTR for each Turbine using lapply
# Named list: each element is a fitdist object for a Turbine
ttr_lnorm_fits <- lapply(split(ttr_2017_2021, ttr_2017_2021$Turbine), function(df) {fitdist(df$TTR, "lnorm")})

# Extract lognormal parameters from ttr_lnorm_fits
ttr_params <- lapply(names(ttr_lnorm_fits), function(turb) {
  
  fit <- ttr_lnorm_fits[[turb]]

  dplyr::tibble(Turbine = turb, meanlog = fit$estimate["meanlog"], sdlog = fit$estimate["sdlog"])
  }
  ) |>
  bind_rows()

# Combine with frates_cte
wt_sim_param <- frates_cte |>
  rename(frate =  `mean(\`Failure Rate\`)`) |>
  left_join(ttr_params, by = "Turbine")

```

### Parameters per Wind Turbine

```{r}
#| label: sim-parameters
#| eval: true

tbl_sim_param <- gt(wt_sim_param) |>
  tab_header(
    title = md("**Simulation Parameters per Wind Turbine**"),
    subtitle = "Estimated Distribution Parameters (2017:2021)"
  ) |>
  tab_spanner(label = "Failure Times", columns = c("frate")) |>
  tab_spanner(label = "Repair Times", columns = c("meanlog", "sdlog")
  ) |>
    fmt_number(
    columns = c(frate, meanlog, sdlog),
    decimals = 5
  ) |>
  cols_label(
    Turbine = md("**Turbine**"),
    frate = md("**λ [h⁻¹]**"),
    meanlog = md("**log(μ) [h]**"),
    sdlog = md("**log(σ) [h]**")
  ) |>
  tab_options(
    table.font.size = 16,
    heading.title.font.size = 20,
    heading.subtitle.font.size = 16,
    row.striping.background_color = "#f0f8ff"
  ) |> 
  opt_row_striping()

```

## Chronological Monte Carlo Simulation

### Components: Wind Turbines
```{r}
#| label: run-MCS-all-turbines
#| eval: true

#' Post: After selecting constant failure rates for the turbine and performing grid-search to fit the best PDFs 
#' to repair-times (it's never exponential...) MC should be the way-to-go nowadays... 
#' You can see the distribution for a fleet, i.e., the whole Wind Park! Vectorisation and parallisation techniques.

sim_start_dt <- "2023-01-01 00"
sim_res_list <- lapply(split(wt_sim_param, wt_sim_param$Turbine), function(params) {mcs_events(params, n_events=15000, dt_start=sim_start_dt, truncate_dist = FALSE)})
sim_events <- bind_rows(sim_res_list, .id = "Turbine")

```

```{r}
#| label: Plot-MCS-FOR-Convergence
#| eval: true

label_df <- sim_events |>
      filter(state == 0) |>
      group_by(Turbine) |>
      slice_tail(n = 1) |>
      ungroup()

plt_turbines_U <- sim_events |> 
  filter(state == 0) |>
  ggplot(aes(x=timestamp, y=A_U*8760, color=Turbine)) +  
  geom_line() +
  geom_label(data=label_df, aes(label = round(A_U * 8760, 2), x = timestamp, y = A_U * 8760, color = Turbine), hjust = -0.2, vjust = 0.5, show.legend = FALSE) + 
  scale_x_datetime(limits = c(min(sim_events$timestamp), max(sim_events$timestamp) + lubridate::years(100))) +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  labs(title="Monte Carlo Simulation - Six Senvion MM92 Wind Turbines", subtitle="Convergence of the Forced Outage Rate index per Turbine", x=paste("Years since", year(sim_events$timestamp[1])), y="FOR\n[h/yr.]", caption="1 Year = 8760 hours.")
 
plt_turbines_U

library(gganimate)
plt_turbines_U_anim <- sim_events |> 
  filter(state == 0) |>
  mutate(year = lubridate::year(timestamp)) |>
  ggplot(aes(x=timestamp, y=A_U*8760, color=Turbine)) +  
  geom_line() +
  geom_label(data=label_df, aes(label = round(A_U * 8760, 2), x = timestamp, y = A_U * 8760, color = Turbine), hjust = -0.2, vjust = 0.5, show.legend = FALSE) + 
  scale_x_datetime(limits = c(min(sim_events$timestamp), max(sim_events$timestamp) + lubridate::years(100))) +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  labs(title="Monte Carlo Simulation - Six Senvion MM92 Wind Turbines", subtitle="Convergence of the Forced Outage Rate index per Turbine", x=paste("Years since", year(sim_events$timestamp[1])), y="FOR\n[h/yr.]", caption="1 Year = 8760 hours.") +
  gganimate::transition_reveal(along = year) 

# gganimate::anim_save("./reports/online_assets/MCS_FOR_convergence.gif", animation = plt_turbines_U_anim, dpi=320, width=800,  height=600, units="px")


```

### Kelmarsh Generation Capacity Curve

```{r}
#| label: sys-algo

sim_res_trunc <- lapply(split(wt_sim_param, wt_sim_param$Turbine), function(params) {mcs_events(params, n_events=20000, dt_start=sim_start_dt, truncate_dist = TRUE)})
sim_events_trunc <- bind_rows(sim_res_trunc, .id = "Turbine")

events_wide_grid <- align_sim_events(sim_events_trunc)
events_wide_grid_MW <- events_wide_grid |> mutate(across(-timestamp, ~ .x * 2.05))

```

```{r}
#| label: events-change

events_changes <- events_wide_grid_MW |>
  filter(total != dplyr::lag(total) | is.na(dplyr::lag(total))) |>
  rename(Kelmarsh = total)

events_changes_zoom <- events_changes[5200:5220, ] |>
  pivot_longer(cols = -timestamp, names_to = "Turbine", values_to = "MW") |>
   mutate(Turbine = factor(Turbine, levels = c(setdiff(unique(Turbine), "Kelmarsh"), "Kelmarsh"))) |>
   arrange(Turbine, timestamp)

```

```{r}
#| label: gen-capacity-curve
#| eval: true

# Get the first six turbines (excluding "Kelmarsh" if present)
turbine_names <- levels(events_changes_zoom$Turbine)
turbine_names <- turbine_names[turbine_names != "Kelmarsh"][1:6]

icon_df <- events_changes_zoom |>
  filter(Turbine %in% turbine_names) |>
  group_by(Turbine) |>
  summarise(
    timestamp = min(timestamp),
    MW = max(MW, na.rm = TRUE)
  ) |>
  mutate(image = "./reports/online_assets/wind-turbine-icon-10.jpg") |>
  mutate(MW = 1.2)

# First 6 turbines (fixed y scale)
plot_fixed <- events_changes_zoom |>
  filter(Turbine %in% turbine_names) |>
  ggplot(aes(x = timestamp, y = MW, color=Turbine)) +
  geom_step() +
  facet_grid(Turbine ~ ., scales = "fixed") +  
  ggimage::geom_image(
    data = icon_df,
    aes(image = image),
    size = 0.5,
    by = "width"
  ) +
  labs(title = "Kelmarsh: System Generation Capacity Curve", x = NULL, y = "Power\n[MW]") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5), 
        axis.text.x = element_blank(),      # Remove x axis labels
        axis.ticks.x = element_blank(),      # Remove x axis ticks)
        legend.position = "none" 
  )

# Remaining turbines (free y scale)
plot_free <- events_changes_zoom |>
  filter(!(Turbine %in% turbine_names)) |>
  ggplot(aes(x = timestamp, y = MW)) +
  geom_step() +
  facet_grid(Turbine ~ ., scales = "free_y") +
  scale_y_continuous(minor_breaks = NULL) +
  labs(x = "Simulation Timeline (Zoomed)", y = "Wind Farm\nCapacity\n[MW]") +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5))
  

# Combine plots vertically
gen_capacity_curve <- plot_fixed / plot_free
gen_capacity_curve

ggsave(filename = "./reports/online_assets/gen_capacity_curve.png", plot = gen_capacity_curve, width = 800, height = 600, units = "px")

```

```{r}
#| label: probs_indices
#| eval: false

tt <- sim_events |>
  group_by(Turbine) |>  
  summarise(tt = sum(duration))

probs <- sim_events |>
  group_by(Turbine) |>  
  filter(state == 1) |>
  summarise( A = sum(duration)/tt$tt[3]) # check corresponding duration per turbine

# A = sum(sim_df$ttf)/last(sim_df$total_time)

# U = sum(sim_df$ttr)/last(sim_df$total_time)

```
