---
title: "SCADA-Based Reliability Evaluation"
subtitle: "Kelmarsh Wind Farm - 12.3 MW"
author: "Jorge A. Thomas"
date: April.2025
format:    
    html:
      theme: default
      self-contained: true
      code-fold: true
      df-print: tibble
      code-summary: "Show the code"
      toc: true
      toc-depth: 2
      grid: 
        margin-width: 350px      
execute: 
  echo: false
reference-location: margin 
citation-location: document
---

## Kelmarsh Wind Farm

### Project Overview

"Kelmarsh comprises six 2.05MW Senvion MM92 turbines. The Project was acquired from EON in December 2014 and was constructed in joint venture with Santander using balance sheet finance. Construction was completed in April 2016. It is now owned by Cubico Investments."

- [https://www.blue-energyco.com/our-projects/kelmarsh/](https://www.blue-energyco.com/our-projects/kelmarsh/)  

::: {#fig-intro layout-ncol="2"}
![(a) Kelmarsh Wind Farm](../imgs/Kelmarsh_wind_project_blue-energyco.jpg){width="98%"}

![(b) Senvion MM92 turbine](../imgs/turbine-senvion_mm92.jpg){width="98%"}

Kelmarsh Wind Farm is located near Haselbach, Northamptonshire, UK.
:::

```{python}
#| label: Pyhton-setup
#| eval: true
#| echo: false

# https://en.wind-turbine-models.com/turbines/889-senvion-mm92
# https://www.thewindpower.net/windfarm_en_17507_kelmarsh.php

# Plumley, C. (2022). Penmanshiel wind farm data (0.1.0) [Kelmarsh dataset]
# Cubico Sustainable Investments

from pathlib import Path
import duckdb
import polars as pl
import polars.selectors as cs
import plotly.express as px
from great_tables import GT, md

fpath_interim = "../data/interim/"
```

```{python}
#| label: Read-Data
tstatus = pl.read_parquet(f"{fpath_interim}Kelmarsh_Turbines_Status_20160114_20230109_n385133_cols12.parquet")

# tstatus
```

```{python}
#| label: Filter-Stops

stops = pl.sql(    
    """
    SELECT * EXCLUDE ("Custom contract category")    
    FROM tstatus
    WHERE "Status" = 'Stop'
    """).collect()
```

```{python}
#| label: Filter-Forced-Outages

# Aggregate tables using SQL syntax
foutages = pl.sql(
    """
    SELECT * 
    FROM stops
    WHERE "IEC category" = 'Forced outage' 
    """).collect()

foutages = foutages.rename({"Duration":"TTR"})

# TTF
foutages = foutages.with_columns(
    (pl.col("Timestamp start").shift(-1) - pl.col("Timestamp end")).shift(1).alias("TTF")
    )

foutages = foutages.with_columns(
    pl.when(pl.col("TTF") < 0).then(None).otherwise(pl.col("TTF")).alias("TTF")
)

# foutages
```

```{python}
#| label: Binary-Plot

#'
# Generate data frame with 0-1 states
# '

dtstarts = foutages.select(["Timestamp start", "Status", "Message",  "wt"]).rename({"Timestamp start": "Timestamp"})

dtends = foutages.select(["Timestamp end", "Status", "Message",  "wt"]).with_columns(pl.lit("Start").alias("Status")).rename({"Timestamp end": "Timestamp"})

# Vertical concatenation
tstates = pl.concat([dtstarts, dtends]).sort(["wt", 'Timestamp'])

tstates= tstates.with_columns(
    pl.when(pl.col("Status") == "Stop").then(0).otherwise(1).alias("State"),
    pl.col("Timestamp").dt.year().alias("Year")    
    )

last_year = tstates["Year"].unique().max()

tstates= tstates.with_columns(    
    (pl.col("Year").cast(str) + "-" + pl.col("wt")).alias("Year_wt")
    ).sort(["Year_wt", "Timestamp"])

tstates = tstates.drop_nulls()
```

```{python}
#| label: e-o-y-algo

# ---- 1) Id  last row per year per wt

last_rows = tstates.group_by("Year_wt").last().sort("Year")

# ---- 2) Create new rows with the same (last seen) State

# This closes the year apporaching from the left 

last_rows = last_rows.with_columns(    
    pl.col("Timestamp").dt.truncate("1y").dt.offset_by("1y").dt.offset_by("-1s").alias("Timestamp"),  # Ceil timestamp
    pl.lit("Last seen").alias("Message")
    )

# ---- 3) Create first row df from last_rows df

first_rows = last_rows.with_columns(
     pl.col("Timestamp").dt.offset_by('1s').alias("Timestamp")
)

# ---- 4) df with new rows to be added

new_rows = pl.concat([first_rows, last_rows])

# Recompute Year_wt
new_rows = new_rows.with_columns(
    pl.col("Timestamp").dt.year().alias("Year")    
)

new_rows = new_rows.with_columns(   
    (pl.col("Year").cast(str) + "-" + pl.col("wt")).alias("Year_wt")
)

# ---- 5) Add new rows to close tstates
new_rows = new_rows.select(tstates.columns)  # reorder rows

tstates = pl.concat([tstates, new_rows]).sort(["Year_wt", "Timestamp"])


# ---- 6) Drop columns Year > 2022 2023 

tstates = tstates.filter(pl.col("Year") <= last_year)

```


```{python}
#| label: Find-Missing-Values
#| eval: false

# Get rows containing any null values
missing = (tstates
          .with_row_count("row_index")
          .filter(pl.any_horizontal(pl.all().is_null()))
          .sort("row_index"))

# Display rows with missing values
print("Rows containing missing values:")
print(missing)

# Get count of missing values per column
print("\nMissing value counts per column:")
print(tstates.null_count())
```


```{python}
#| label: Square-Signal-Plot
#| eval: false

import plotly.express as px

# Other line_shape options, or interpolation methods between given points:

# 'hv' step ends, equivalent to pyplot's post option;
# 'vh' step starts;
# 'hvh' step middles, x axis;
# 'vhv' step middles, y axis;
# 'spline' smooth curve between points;
# 'linear' line segments between points, default value for line_shape.

fig = px.line(tstates,
              x='Timestamp', 
              y="State", 
              line_shape='hv', 
              facet_row="Year_wt",
              color="wt",
              hover_data=["Timestamp", "Message", "Status"],  # Add the variables you want in tooltip
              title="Time / State Diagram for Kellmarsh Wind Turbines (2016-2022)",
              subtitle= "Step-down = Forced outage (IEC); Step-up=Start",
              labels={"Timestamp": "UTC", "State": "", "wt": ""}, 
              facet_row_spacing=0.01
              )
# Adjust spacing between facets
fig.update_layout(
    height=1200,  # Increase overall height
    width=800,   # Set overall width
    margin=dict(l=100, r=50, t=100, b=50),  # Adjust margins
    showlegend=False,
    legend=dict(orientation="h",
                yanchor="bottom",
                y=1.01,
                xanchor="right",
                x=1,
                font=dict(size=8),  # Reduce legend font size
                itemsizing='constant',  # Make legend items more compact
                itemwidth=30  # Reduce width of legend items
                )                
)

# Update y-axis to show only 0 and 1 as labels
fig.update_yaxes(
    tickvals=[0, 1],  # Set tick values to 0 and 1
    ticktext=["", ""]  # Optional: Explicitly set tick text
)

fig.update_xaxes(matches=None, 
tickformat="%b",
showgrid=True
)

# Update facet labels orientation and size
fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1], textangle=0, xanchor='left', x=-0.08))  # labels horizontal
fig.update_annotations(font_size=9)  # Reduce font size

fig.show()

```

## Wind Turbines Time / State Diagram

```{python}
#| label: Time-State-Plot-By-Year

import plotly.express as px
from plotly.subplots import make_subplots

# Get unique years
years = tstates["Year"].unique().sort()

# Create a plot for each year
pl_time_state = []
for year in years:
    # Filter data for current year
    year_data = tstates.filter(pl.col("Year") == year)
    
    fig = px.line(year_data,
                  x='Timestamp', 
                  y="State", 
                  line_shape='hv', 
                  facet_row="wt",
                  color="wt",
                  hover_data=["Message", "Status"],
                  title="Step-down: Forced outage (IEC) | Step-up: Start",
                  #subtitle= "(0) Down Step=Forced outage (IEC), (1) Up Step=Start",
                  labels={"Timestamp": "UTC", "State": "", "wt": ""}, 
                  facet_row_spacing=0.01
                  )
    # Update layout
    fig.update_layout(
        height=700,
        width=700,
        margin=dict(l=100, r=50, t=100, b=50),
        showlegend=False,
        legend=dict(orientation="h",
                    yanchor="bottom",
                    y=1.01,
                    xanchor="right",
                    x=1,
                    font=dict(size=8),
                    itemsizing='constant',
                    itemwidth=30
                    )                
    )
    # Update axes
    fig.update_yaxes(
        tickvals=[0, 1],
        ticktext=["", ""]
    )
    fig.update_xaxes(
        matches='x',
        tickformat="%b",
        dtick="M1",  # Show ticks every month
        showgrid=True
    )
    # Update facet labels
    fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1], 
                                               textangle=0, 
                                               xanchor='left', 
                                               x=-0.05))
    fig.update_annotations(font_size=10)
    pl_time_state.append(fig)

# End of loop
```

::: {.panel-tabset}

## 2016

```{python}
pl_time_state[0].show()
```

## 2017

```{python}
pl_time_state[1].show()
```

## 2018

```{python}
pl_time_state[2].show()
```

## 2019

```{python}
pl_time_state[3].show()
```

## 2020

```{python}
pl_time_state[4].show()
```

## 2021

```{python}
pl_time_state[5].show()
```

## 2022

```{python}
pl_time_state[6].show()
```

:::

```{python}
#| label: calc-durations
#| eval: true

tstates_dur = tstates.with_columns(
    (pl.col("Timestamp").diff().dt.total_seconds()/3_600).alias("Duration").shift(-1)
)

tstates_dur = tstates_dur.with_columns(
    pl.when(pl.col("Duration") <= 0)
    .then(None)
    .otherwise(pl.col("Duration"))
    .alias("Duration")    
)

# Get each year duration
year_durations = tstates.group_by("Year").agg(
    pl.col("Timestamp").max().alias("year_end"),
    pl.col("Timestamp").min().alias("year_start")
).with_columns(
    (pl.col("year_end") - pl.col("year_start")).dt.total_seconds().alias("duration_sec")
).sort("Year")

year_durations = year_durations.with_columns(
    (pl.col("duration_sec")/3_600).round(2).alias("duration_hours")
).drop("duration_sec")

tstates_dur = tstates_dur.rename({"wt": "Turbine"}).drop_nulls()
```

```{python}
#label: calc-ttf-ttr

ttf = tstates_dur.filter(pl.col("State") == 1).rename({"Duration": "TTF"})
ttf_agg_year = (
    # ttf.group_by("Year_wt")
    ttf.group_by(["Year",  "Turbine"])
    .agg(
        pl.len().alias("State delete"),                
        pl.sum("TTF").alias("Time to Failure"),
        pl.mean("TTF").alias("MTTF")                      
        )
    # .rename({"wt": "Turbine"})
    #.sort("Year_wt")     
    .sort(["Year",  "Turbine"])     
    )

ttr = tstates_dur.filter(pl.col("State") == 0).rename({"Duration": "TTR"})
ttr_agg_year = (    
    ttr.group_by(["Year",  "Turbine"])
    .agg(
        pl.len().alias("Forced Outages"),                
        pl.sum("TTR").alias("TTR"),
        pl.mean("TTR").alias("MTTR")                      
        )    
    .sort(["Year",  "Turbine"])      
    )
```


```{python}
#| label: Reliablity-parameters
#| eval: true

rel_param = ttf_agg_year.join(ttr_agg_year, on=["Year",  "Turbine"], how="left")
rel_param = rel_param.join(year_durations, on="Year")

rel_param = rel_param.with_columns(
    (pl.col("Forced Outages")/pl.col("duration_hours")).alias("Failure Rate"),
    (pl.col("MTTR")/(pl.col("MTTF") + pl.col("MTTR"))).alias("FOR"),    
)

rel_param = rel_param.with_columns(
    #(pl.col("FOR")*pl.col("duration_hours")).alias("Total Outage Time"),
    (1-pl.col("FOR")).alias("Availability")

)

rel_param = rel_param.drop(["Time to Failure", "State delete", "year_end" , "year_start" , "duration_hours"])

```

## Reliability Parameters

```{python}
import polars.selectors as cs
from great_tables import GT, md, style, loc

gt_reliability = (
    GT(rel_param,
    rowname_col = "Turbine",
    groupname_col="Year"
    )
    .opt_vertical_padding(scale=0.6)
    .opt_stylize(style=1)
    .tab_style(
        style=style.text(weight="bold"), 
        locations=loc.body(columns="Year")
    )
    .tab_header(
        title=md("Six Wind Turbines - Model Senvion MM92"),
        subtitle=md("Reliability Evaluation (2016 - 2022)")
    )
    .tab_source_note(source_note="Note: Forced Outages (IEC) only.")    
    .fmt_number(columns=["MTTF", "MTTR", "TTR"], decimals=2)
    .fmt_number(columns=["Failure Rate","FOR", "Availability"], decimals=5)    
    .tab_spanner(label="Probabilities ({{P_0}}, {{P_1}})", columns=["FOR", "Availability"])
    .tab_spanner(label="Out-of-service", columns=["MTTR", "TTR"])
    .cols_move_to_start(columns=["Year", "Turbine", "Forced Outages", "Failure Rate"])
    .cols_label(
        #{"Forced Outages": "Outages"},
        {"Failure Rate": "Failure Rate [{{h^-1}}]"},        
        MTTF = "MTTF [{{h}}]",
        MTTR = "MTTR [{{h}}]",
        TTR = "Total Time [{{h}}]",
        FOR="Unavailability (FOR)"    
    )
)

gt_reliability



```